{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part8/administracion_de_bases_de_datos_y_usuarios","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Ahora agregaremos la administración de usuarios a nuestra aplicación, pero comencemos primero a usar una base de datos para almacenar datos.</p>\n<h3>Mongoose y Apollo</h3>\n<p>Instalar mongoose y mongoose-unique-validator:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> mongoose mongoose-unique-validator</code></pre></div>\n<p>Imitaremos lo que hicimos en las partes <a href=\"/es/part3/save_data_to_mongo_db\">3</a> y <a href=\"/es/part4/structure_of_backend_application_introduction_to_testing\">4</a>.</p>\n<p>El esquema de persona se ha definido de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  street<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  city<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Person'</span><span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">)</span></code></pre></div>\n<p>También incluimos algunas validaciones. <em>required: true</em>, que asegura que el valor exista, es realmente redundante, ya que el solo uso de GraphQL asegura que los campos existan. Sin embargo, es bueno mantener también la validación en la base de datos.</p>\n<p>Podemos hacer que la aplicación funcione principalmente con los siguientes cambios:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> ApolloServer<span class=\"token punctuation\">,</span> UserInputError<span class=\"token punctuation\">,</span> gql <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> Person <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'./models/person'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">MONGODB_URI</span> <span class=\"token operator\">=</span> <span class=\"token string\">'mongodb+srv://fullstack:halfstack@cluster0-ostce.mongodb.net/graphql?retryWrites=true'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connecting to'</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">MONGODB_URI</span><span class=\"token punctuation\">)</span>\n\nmongoose<span class=\"token punctuation\">.</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token constant\">MONGODB_URI</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'connected to MongoDB'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'error connection to MongoDB:'</span><span class=\"token punctuation\">,</span> error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> typeDefs <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  ...\n</span><span class=\"token template-punctuation string\">`</span></span>\n\n<span class=\"token keyword\">const</span> resolvers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">personCount</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Person<span class=\"token punctuation\">.</span>collection<span class=\"token punctuation\">.</span><span class=\"token function\">countDocuments</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// filters missing</span>\n      <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">findPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">address</span><span class=\"token operator\">:</span> <span class=\"token parameter\">root</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        street<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">,</span>\n        city<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>city\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">editNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      person<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>phone\n      <span class=\"token keyword\">return</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los cambios son bastante sencillos. Sin embargo, hay algunas cosas dignas de mención. Como recordamos, en Mongo el campo de identificación de un objeto se llama <i>_id</i> y previamente tuvimos que analizar el nombre del campo a <i>id</i> nosotros mismos. Ahora GraphQL puede hacer esto automáticamente.</p>\n<p>Otra cosa digna de mención es que las funciones de resolución ahora devuelven una <i>promesa</i>, cuando antes devolvían objetos normales. Cuando un resolutor devuelve una promesa, el servidor Apollo <a href=\"https://www.apollographql.com/docs/apollo-server/data/data/#resolver-results\">devuelve</a> el valor al que se resuelve la promesa.</p>\n<p>Por ejemplo, si se ejecuta la siguiente función de resolución,</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>El servidor Apollo espera que se resuelva la promesa y devuelve el resultado . Entonces, Apollo funciona más o menos así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span> <span class=\"token parameter\">result</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// return the result </span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Completemos la resolución de <em>allPersons</em> para que tome en cuenta el parámetro opcional <em>phone</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>args<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $exists<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">===</span> <span class=\"token string\">'YES'</span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Entonces, si la consulta no tiene un parámetro <em>phone</em>, todas las personas son devueltas. Si el parámetro tiene el valor <i>YES</i>, el resultado de la consulta</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $exists<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>se devuelve, por lo que los objetos en los que el campo <em>phone</em> tiene un valor. Si el parámetro tiene el valor <i>NO</i>, la consulta devuelve los objetos en los que el campo <em>phone</em> no tiene valor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $exists<span class=\"token operator\">:</span> <span class=\"token boolean\">false</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<h3>Validación</h3>\n<p>Al igual que en GraphQL, la entrada ahora se valida utilizando las validaciones definidas en el esquema de mangosta. Para manejar posibles errores de validación en el esquema, debemos agregar un bloque de manejo de errores <em>try/catch</em> al método <em>save</em>. Cuando terminamos en la captura, lanzamos una excepción adecuada:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> person\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">editNumber</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      person<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">=</span> args<span class=\"token punctuation\">.</span>phone\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> person\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>El código del backend se puede encontrar en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-4\">Github</a>, rama <i>part8-4</i>.</p>\n<h3>Usuario e inicio de sesión</h3>\n<p>Agreguemos la administración de usuarios a nuestra aplicación. Por simplicidad, supongamos que todos los usuarios tienen la misma contraseña que está codificada en el sistema. Sería sencillo guardar contraseñas individuales para todos los usuarios siguiendo los principios de la <a href=\"/es/part4/user_administration\">parte 4</a>, pero debido a que nuestro enfoque está en GraphQL, esta vez dejaremos de lado toda esa molestia adicional.</p>\n<p>El esquema de usuario es el siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> mongoose <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'mongoose'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span>\n      ref<span class=\"token operator\">:</span> <span class=\"token string\">'Person'</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> mongoose<span class=\"token punctuation\">.</span><span class=\"token function\">model</span><span class=\"token punctuation\">(</span><span class=\"token string\">'User'</span><span class=\"token punctuation\">,</span> schema<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Cada usuario está conectado a un grupo de otras personas en el sistema a través del campo <em>friends</em>. La idea es que cuando un usuario, es decir, <i> mluukkai </i>, agrega una persona, es decir, <i> Arto Hellas </i>, a la lista, la persona se agrega a su lista de <em>amigos</em>. De esta manera, los usuarios registrados pueden tener su propia vista personalizada en la aplicación.</p>\n<p>El inicio de sesión e identificación del usuario se maneja de la misma manera que usamos en la <a href=\"/es/part4/token_authentication\">parte 4</a> cuando usamos REST, usando tokens.</p>\n<p>Extendamos el esquema así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type User <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>Person<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Token <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  me<span class=\"token operator\">:</span> User\n<span class=\"token punctuation\">}</span>\n\ntype Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>\n    username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User\n  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>\n    username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    password<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Token\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La consulta <em>me</em> devuelve el usuario actualmente conectado. Los nuevos usuarios se crean con la mutación <em>createUser</em> y el inicio de sesión ocurre con la mutación <em>login</em>.</p>\n<p>Los resolutores de las mutaciones son los siguientes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> jwt <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'jsonwebtoken'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token constant\">JWT_SECRET</span> <span class=\"token operator\">=</span> <span class=\"token string\">'NEED_HERE_A_SECRET_KEY'</span>\n\nMutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  <span class=\"token function-variable function\">createUser</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">User</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> user<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">catch</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token function-variable function\">login</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> user <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> username<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>username <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span>user <span class=\"token operator\">||</span> args<span class=\"token punctuation\">.</span>password <span class=\"token operator\">!==</span> <span class=\"token string\">'secred'</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"wrong credentials\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> userForToken <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n      username<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>username<span class=\"token punctuation\">,</span>\n      id<span class=\"token operator\">:</span> user<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">sign</span><span class=\"token punctuation\">(</span>userForToken<span class=\"token punctuation\">,</span> <span class=\"token constant\">JWT_SECRET</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>La nueva mutación de usuario es sencilla. La mutación de inicio de sesión comprueba si el par de nombre de usuario/contraseña es válido. Y si de hecho es válido, devuelve un token jwt familiar de <a href=\"/es/part4/token_authentication\">parte 4</a>.</p>\n<p>Al igual que en el caso anterior con REST, la idea ahora es que un usuario que haya iniciado sesión agregue un token que reciba al iniciar sesión a todas sus solicitudes. Y al igual que con REST, el token se agrega a las consultas GraphQL usando el encabezado <i>Authorization</i>.</p>\n<p>En el playground de GraphQL, el encabezado se agrega a una consulta como esta</p>\n<picture><img src=\"/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/5a190/24.png\" srcset=\"/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/772e8/24.png 200w,\n/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/e17e5/24.png 400w,\n/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/5a190/24.png 800w,\n/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/c1b63/24.png 1200w,\n/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/29007/24.png 1600w,\n/static/9e7f64a4ff0d5a1a1cce2b63c7ce9dad/11d70/24.png 1802w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Ahora ampliemos la definición del objeto <em>server</em> agregando un tercer parámetro <a href=\"https://www.apollographql.com/docs/apollo-server/data/data/#context-argument\">contexto</a> a la llamada al constructor:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> server <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloServer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  typeDefs<span class=\"token punctuation\">,</span>\n  resolvers<span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">context</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> req <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> auth <span class=\"token operator\">=</span> req <span class=\"token operator\">?</span> req<span class=\"token punctuation\">.</span>headers<span class=\"token punctuation\">.</span>authorization <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>auth <span class=\"token operator\">&amp;&amp;</span> auth<span class=\"token punctuation\">.</span><span class=\"token function\">toLowerCase</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">'bearer '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> decodedToken <span class=\"token operator\">=</span> jwt<span class=\"token punctuation\">.</span><span class=\"token function\">verify</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">        auth<span class=\"token punctuation\">.</span><span class=\"token function\">substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">JWT_SECRET</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">const</span> currentUser <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">findById</span><span class=\"token punctuation\">(</span>decodedToken<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'friends'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> currentUser <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>El objeto devuelto por el contexto se le da a todos los resolutores como su <i>tercer parámetro</i>. El contexto es el lugar adecuado para hacer cosas que comparten varios resolutores, como <a href=\"https://blog.apollographql.com/authorization-in-graphql-452b1c402a9?_ga=2.45656161.474875091.1550613879-1581139173.1549828167\">identificación de usuario</a>.</p>\n<p>Entonces, nuestro código establece el objeto correspondiente al usuario que realizó la solicitud al campo <em>currentUser</em> del contexto. Si no hay ningún usuario conectado a la solicitud, el valor del campo no está definido.</p>\n<p>El resolutor de la consulta <em>me</em> es muy simple, simplemente devuelve el usuario que ha iniciado sesión que recibe en el campo <em>currentUser</em> del tercer parámetro del resolutor, <em>context</em>. Vale la pena señalar que si no hay un usuario que haya iniciado sesión, es decir, no hay un token válido en el encabezado adjunto a la solicitud, la consulta devuelve <i>null</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function-variable function\">me</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> context<span class=\"token punctuation\">.</span>currentUser\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<h3>Lista de amigos</h3>\n<p>Completemos el backend de la aplicación para que agregar y editar personas requiera iniciar sesión, y las personas agregadas se agreguen automáticamente al lista de amigos del usuario.</p>\n<p>Primero eliminemos de la base de datos a todas las personas que no estén en la lista de amigos de nadie.</p>\n<p>La mutación <em>addPerson</em> cambia así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">const</span> currentUser <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>currentUser\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">await</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      currentUser<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">=</span> currentUser<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">await</span> currentUser<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n        invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> person\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">//...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si no se puede encontrar un usuario registrado en el contexto, se lanza un <em>AuthenticationError</em>. La creación de nuevas personas ahora se realiza con la sintaxis <em>async / await</em>, porque si la operación es exitosa, la persona creada se agrega a la lista de amigos del usuario.</p>\n<p>También agreguemos funcionalidad para agregar un usuario existente a su lista de amigos. La mutación es la siguiente:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">addAsFriend</span><span class=\"token punctuation\">(</span>\n    name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Y el solucionador de mutaciones:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  <span class=\"token function-variable function\">addAsFriend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> currentUser <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">nonFriendAlready</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">person</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n      <span class=\"token operator\">!</span>currentUser<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">f</span> <span class=\"token operator\">=></span> f<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">findOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> <span class=\"token function\">nonFriendAlready</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      currentUser<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">=</span> currentUser<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">await</span> currentUser<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">return</span> currentUser\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Observe cómo el solucionador <i>desestructura</i> al usuario que ha iniciado sesión desde el contexto. Entonces, en lugar de guardar <em>currentUser</em> en una variable separada en una función</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addAsFriend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> currentUser <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>currentUser</code></pre></div>\n<p>se recibe directamente en la definición de parámetros de la función:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function-variable function\">addAsFriend</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> currentUser <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>El código del backend se puede encontrar en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-5\">Github</a> rama <i>part8-5</i>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 8.13.-8.16.</h3>\n<h4>8.13: Base de datos, parte 1</h4>\n<p>Cambie la aplicación de la biblioteca para que guarde los datos en una base de datos. Puede encontrar el <i>esquema de mongoose</i> para libros y autores desde <a href=\"https://github.com/fullstack-hy2020/misc/blob/master/library-schema.md\">aquí</a>.</p>\n<p>Cambiemos un poco el esquema de graphql del libro</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Book <span class=\"token punctuation\">{</span>\n  title<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  published<span class=\"token operator\">:</span> Int<span class=\"token operator\">!</span>\n  author<span class=\"token operator\">:</span> Author<span class=\"token operator\">!</span>\n  genres<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>String<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>para que en lugar de solo el nombre del autor, el objeto libro contenga todos los detalles del autor.</p>\n<p>Puede asumir que el usuario no intentará agregar libros o autores defectuosos, por lo que no tiene que preocuparse por los errores de validación.</p>\n<p>Las siguientes cosas <i>no</i> tienen que funcionar todavía</p>\n<ul>\n<li>consulta <em>allBooks</em> con parámetros</li>\n<li>campo <i>bookCount</i> de un objeto de autor</li>\n<li>campo <em>author</em> de un libro</li>\n<li>mutación <em>editAuthor</em></li>\n</ul>\n<h4>8.14 : Base de datos, parte 2</h4>\n<p>Complete el programa para que funcionen todas las consultas (excepto <em>allBooks</em> con el parámetro <em>author</em>) y mutaciones.</p>\n<p>Puede encontrar esto <a href=\"https://docs.mongodb.com/manual/reference/operator/query/in/\">útil</a>.</p>\n<h4>8.15 Base de datos, parte 3</h4>\n<p>Complete el programa de modo que los errores de validación de la base de datos (por ejemplo, título de libro o nombre del autor demasiado corto) se manejen con sensatez. Esto significa que hacen que se emita <em>UserInputError</em> con un mensaje de error adecuado.</p>\n<h4>8.16 usuario e inicio de sesión</h4>\n<p>Agregue administración de usuarios a su aplicación. Expanda el esquema así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type User <span class=\"token punctuation\">{</span>\n  username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  favoriteGenre<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Token <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>\n\ntype Query <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ..</span>\n  me<span class=\"token operator\">:</span> User\n<span class=\"token punctuation\">}</span>\n\ntype Mutation <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n  <span class=\"token function\">createUser</span><span class=\"token punctuation\">(</span>\n    username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    favoriteGenre<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> User\n  <span class=\"token function\">login</span><span class=\"token punctuation\">(</span>\n    username<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n    password<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  <span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> Token\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cree resolutores para la consulta <em>me</em> y las nuevas mutaciones <em>createUser</em> y <em>login</em>. Como en el material del curso, puede asumir que todos los usuarios tienen la misma contraseña codificada.</p>\n<p>Haga que las mutaciones <em>addBook</em> y <em>editAuthor</em> sean posibles solo si la solicitud incluye un token válido.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-8.svg"},"part":8,"letter":"c","lang":"es"}}},"pageContext":{"part":8,"letter":"c","lang":"es"}}}