{"componentChunkName":"component---src-templates-content-template-js","path":"/es/part8/fragmentos_y_suscripciones","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Nos acercamos al final del curso. Terminemos echando un vistazo a algunos detalles más de GraphQL.</p>\n<h3>fragmentos</h3>\n<p>Es bastante común en GraphQL que múltiples consultas devuelvan resultados similares. Por ejemplo, la consulta para los detalles de una persona</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Pekka Mikkola\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    name\n    phone\n    address<span class=\"token punctuation\">{</span>\n      street \n      city\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>y la consulta para todas las personas</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n    phone\n    address<span class=\"token punctuation\">{</span>\n      street \n      city\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>ambas regresan personas. Al elegir los campos a devolver, ambas consultas deben definir exactamente los mismos campos.</p>\n<p>Este tipo de situaciones se pueden simplificar con el uso de <a href=\"https://graphql.org/learn/queries/#fragments\">fragmentos</a>. Declaremos un fragmento para seleccionar todos los campos de una persona:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">fragment PersonDetails on Person <span class=\"token punctuation\">{</span>\n  name\n  phone \n  address <span class=\"token punctuation\">{</span>\n    street \n    city\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Con el fragment podemos hacer las consultas en forma compacta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>PersonDetails</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nquery <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Pekka Mikkola\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">...</span>PersonDetails</span>  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Los fragmentos <i><strong>son no definidos</strong></i> en el esquema GraphQL, sino en el cliente. Los fragmentos deben declararse cuando el cliente los utilice para consultas.</p>\n<p>En principio, podríamos declarar el fragmento con cada consulta de la siguiente manera:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  {\n    allPersons  {\n      ...PersonDetails\n    }\n  }\n\n  fragment PersonDetails on Person {\n    name\n    phone \n    address {\n      street \n      city\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Sin embargo, es mucho mejor declarar el fragmento una vez y guardarlo en una variable.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">PERSON_DETAILS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  fragment PersonDetails on Person {\n    id\n    name\n    phone \n    address {\n      street \n      city\n    }\n  }\n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<p>Declarado así, el fragmento se puede colocar en cualquier consulta o mutación usando un <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals\">signo de dólar y llaves</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">\n  {\n    allPersons  {\n      ...PersonDetails\n    }\n  }\n  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PERSON_DETAILS</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">  \n</span><span class=\"token template-punctuation string\">`</span></span></code></pre></div>\n<h3>Suscripciones</h3>\n<p>Junto con los tipos de consulta y mutación, GraphQL ofrece un tercer tipo de operación: <a href=\"https://www.apollographql.com/docs/react/data/subscriptions/\">suscripciones</a>. Con las suscripciones, los clientes pueden <i>suscribirse</i> a actualizaciones sobre cambios en el servidor.</p>\n<p>Las suscripciones son radicalmente diferentes a todo lo que hemos visto en este curso hasta ahora. Hasta ahora, toda la interacción entre el navegador y el servidor ha sido la aplicación React en el navegador que realiza solicitudes HTTP al servidor. Las consultas y mutaciones de GraphQL también se han realizado de esta manera.\nCon las suscripciones la situación es la contraria. Una vez que una aplicación se ha suscrito, comienza a escuchar al servidor.\nCuando ocurren cambios en el servidor, envía una notificación a todos sus <i>suscriptores</i>.</p>\n<p>Técnicamente hablando, el protocolo HTTP no es adecuado para la comunicación desde el servidor al navegador, por lo que Apollo usa [WebSockets] (<a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API\">https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API</a> ) para la comunicación del suscriptor del servidor.</p>\n<h3>Suscripciones en el servidor</h3>\n<p>Implementemos suscripciones para suscribirse a notificaciones sobre nuevas personas agregadas.</p>\n<p>No hay muchos cambios en el servidor. El esquema cambia así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Subscription <span class=\"token punctuation\">{</span>\n  personAdded<span class=\"token operator\">:</span> Person<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span>    </code></pre></div>\n<p>Entonces, cuando se agrega una nueva persona, todos sus detalles se envían a todos los suscriptores.</p>\n<p>La suscripción <em>personAdded</em> necesita un solucionador. El solucionador <em>addPerson</em> también debe modificarse para que envíe una notificación a los suscriptores.</p>\n<p>Los cambios requeridos son los siguientes:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> PubSub <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'apollo-server'</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> pubsub <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">PubSub</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  Mutation<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">addPerson</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">,</span> context</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> person <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Person</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>args <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">const</span> currentUser <span class=\"token operator\">=</span> context<span class=\"token punctuation\">.</span>currentUser\n\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>currentUser<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">AuthenticationError</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"not authenticated\"</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">await</span> person<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        currentUser<span class=\"token punctuation\">.</span>friends <span class=\"token operator\">=</span> currentUser<span class=\"token punctuation\">.</span>friends<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>person<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">await</span> currentUser<span class=\"token punctuation\">.</span><span class=\"token function\">save</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">UserInputError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          invalidArgs<span class=\"token operator\">:</span> args<span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\">      pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">publish</span><span class=\"token punctuation\">(</span><span class=\"token string\">'PERSON_ADDED'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> personAdded<span class=\"token operator\">:</span> person <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span>\n      <span class=\"token keyword\">return</span> person\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  Subscription<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    personAdded<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token function-variable function\">subscribe</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> pubsub<span class=\"token punctuation\">.</span><span class=\"token function\">asyncIterator</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span><span class=\"token string\">'PERSON_ADDED'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span></code></pre></div>\n<p>Con las suscripciones, la comunicación ocurre usando el principio <a href=\"https://en.wikipedia.org/wiki/Publish%E2%80%93subscribe_pattern\">publicar-suscribir</a> utilizando un objeto usando un <a href=\"https://www.apollographql.com/docs/graphql-subscriptions/setup/#setup\">PubSub</a> interfaz. Agregar una nueva persona <i> publica </i> una notificación sobre la operación a todos los suscriptores con el método <em>publish</em> de PubSub.</p>\n<p><em>personAdded</em> subscriptions resolver registra a todos los suscriptores devolviéndoles un [objeto iterador] adecuado (<a href=\"https://www.apollographql.com/docs/graphql-subscriptions/subscriptions-to-schema/\">https://www.apollographql.com/docs/graphql-subscriptions/subscriptions-to-schema/</a>).</p>\n<p>Hagamos los siguientes cambios en el código que inicia el servidor</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">server<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">then</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> url<span class=\"token punctuation\">,</span> subscriptionsUrl <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Server ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>url<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Subscriptions ready at </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>subscriptionsUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Vemos que el servidor escucha suscripciones en la dirección <em>ws://localhost:4000/graphql</em></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Server ready at http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token regex\">/localhost:4000/</span>\nSubscriptions ready at ws<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">4000</span><span class=\"token operator\">/</span>graphql</code></pre></div>\n<p>No se necesitan otros cambios en el servidor.</p>\n<p>Es posible probar las suscripciones con el patio de juegos de GraphQL de esta manera:</p>\n<picture><img src=\"/static/f0af07ed93701d5b67b6c6b62a5dc838/5a190/31.png\" srcset=\"/static/f0af07ed93701d5b67b6c6b62a5dc838/772e8/31.png 200w,\n/static/f0af07ed93701d5b67b6c6b62a5dc838/e17e5/31.png 400w,\n/static/f0af07ed93701d5b67b6c6b62a5dc838/5a190/31.png 800w,\n/static/f0af07ed93701d5b67b6c6b62a5dc838/c1b63/31.png 1200w,\n/static/f0af07ed93701d5b67b6c6b62a5dc838/29007/31.png 1600w,\n/static/f0af07ed93701d5b67b6c6b62a5dc838/cad61/31.png 1988w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Cuando presiona \"reproducir\" en una suscripción, el área de juegos espera las notificaciones de la suscripción.</p>\n<p>El código de backend se puede encontrar en [Github] (<a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-6\">https://github.com/fullstack-hy2020/graphql-phonebook-backend/tree/part8-6</a>), rama <i>part8-6</i>.</p>\n<h3>Suscripciones en el cliente</h3>\n<p>Para usar suscripciones en nuestra aplicación React, tenemos que hacer algunos cambios, especialmente en su <a href=\"https://www.apollographql.com/docs/react/data/subscriptions/\">configuración</a>.\nLa configuración en <i>index.js</i> tiene que ser modificada así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> \n  ApolloClient<span class=\"token punctuation\">,</span> ApolloProvider<span class=\"token punctuation\">,</span> HttpLink<span class=\"token punctuation\">,</span> InMemoryCache<span class=\"token punctuation\">,</span> \n<span class=\"gatsby-highlight-code-line\">  split</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> setContext <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'apollo-link-context'</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> getMainDefinition <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client/utilities'</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> WebSocketLink <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client/link/ws'</span></span>\n<span class=\"token keyword\">const</span> authLink <span class=\"token operator\">=</span> <span class=\"token function\">setContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">_<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span> headers <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> token <span class=\"token operator\">=</span> localStorage<span class=\"token punctuation\">.</span><span class=\"token function\">getItem</span><span class=\"token punctuation\">(</span><span class=\"token string\">'phonenumbers-user-token'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n    headers<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token operator\">...</span>headers<span class=\"token punctuation\">,</span>\n      authorization<span class=\"token operator\">:</span> token <span class=\"token operator\">?</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">bearer </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>token<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span> <span class=\"token operator\">:</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> httpLink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">HttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:4000'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> wsLink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">  uri<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ws://localhost:4000/graphql</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    reconnect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> splitLink <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> query <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">const</span> definition <span class=\"token operator\">=</span> <span class=\"token function\">getMainDefinition</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span></span><span class=\"gatsby-highlight-code-line\">      definition<span class=\"token punctuation\">.</span>kind <span class=\"token operator\">===</span> <span class=\"token string\">'OperationDefinition'</span> <span class=\"token operator\">&amp;&amp;</span></span><span class=\"gatsby-highlight-code-line\">      definition<span class=\"token punctuation\">.</span>operation <span class=\"token operator\">===</span> <span class=\"token string\">'subscription'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  wsLink<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">  authLink<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>httpLink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\"><span class=\"token punctuation\">)</span></span>\n<span class=\"token keyword\">const</span> client <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">ApolloClient</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  cache<span class=\"token operator\">:</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">InMemoryCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  link<span class=\"token operator\">:</span> splitLink</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>ApolloProvider client<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>client<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>ApolloProvider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span></code></pre></div>\n<p>Para que esto funcione, tenemos que instalar algunas dependencias:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> @apollo/client subscriptions-transport-ws</code></pre></div>\n<p>La nueva configuración se debe al hecho de que la aplicación debe tener una conexión HTTP así como una conexión WebSocket al servidor GraphQL.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> wsLink <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">WebSocketLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">ws://localhost:4000/graphql</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n  options<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> reconnect<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">const</span> httpLink <span class=\"token operator\">=</span> <span class=\"token function\">createHttpLink</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  uri<span class=\"token operator\">:</span> <span class=\"token string\">'http://localhost:4000'</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Las suscripciones se realizan utilizando la función de gancho <a href=\"https://www.apollographql.com/docs/react/api/react/hooks/#usesubscription\">useSubscription</a>.</p>\n<p>Modifiquemos el código así:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token constant\">PERSON_ADDED</span> <span class=\"token operator\">=</span> gql<span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\"></span><span class=\"gatsby-highlight-code-line\">  subscription {</span><span class=\"gatsby-highlight-code-line\">    personAdded {</span><span class=\"gatsby-highlight-code-line\">      ...PersonDetails</span><span class=\"gatsby-highlight-code-line\">    }</span><span class=\"gatsby-highlight-code-line\">  }</span><span class=\"gatsby-highlight-code-line\">  </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">PERSON_DETAILS</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"></span><span class=\"gatsby-highlight-code-line\"></span><span class=\"token template-punctuation string\">`</span></span></span>\n<span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  useQuery<span class=\"token punctuation\">,</span> useMutation<span class=\"token punctuation\">,</span> useSubscription<span class=\"token punctuation\">,</span> useApolloClient</span><span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'@apollo/client'</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token function\">useSubscription</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PERSON_ADDED</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSubscriptionData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> subscriptionData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>subscriptionData<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Cuando se agrega una nueva persona a la agenda, no independientemente de dónde se haga, los detalles de la nueva persona se imprimen en la consola del cliente:</p>\n<picture><img src=\"/static/f3dac7b402a568cea72e49e2d8004ab5/5a190/32e.png\" srcset=\"/static/f3dac7b402a568cea72e49e2d8004ab5/772e8/32e.png 200w,\n/static/f3dac7b402a568cea72e49e2d8004ab5/e17e5/32e.png 400w,\n/static/f3dac7b402a568cea72e49e2d8004ab5/5a190/32e.png 800w,\n/static/f3dac7b402a568cea72e49e2d8004ab5/c1b63/32e.png 1200w,\n/static/f3dac7b402a568cea72e49e2d8004ab5/913a1/32e.png 1476w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Cuando se agrega una nueva persona, el servidor envía una notificación al cliente y se llama a la función de devolución de llamada definida en el atributo <em>onSubscriptionData</em> y se le dan los detalles. de la nueva persona como parámetros.</p>\n<p>Extendamos nuestra solución para que cuando se reciban los detalles de una nueva persona, la persona se agregue a la caché de Apollo, de modo que se muestre en la pantalla de inmediato.</p>\n<p>Sin embargo, debemos tener en cuenta que cuando nuestra aplicación crea una nueva persona, no se debe agregar a la caché dos veces:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">updateCacheWith</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">addedPerson</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">includedIn</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token keyword\">set</span><span class=\"token punctuation\">,</span> object</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> \n      <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">p</span> <span class=\"token operator\">=></span> p<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">includes</span><span class=\"token punctuation\">(</span>object<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">)</span>  \n\n    <span class=\"token keyword\">const</span> dataInStore <span class=\"token operator\">=</span> client<span class=\"token punctuation\">.</span><span class=\"token function\">readQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">includedIn</span><span class=\"token punctuation\">(</span>dataInStore<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">,</span> addedPerson<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      client<span class=\"token punctuation\">.</span><span class=\"token function\">writeQuery</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        query<span class=\"token operator\">:</span> <span class=\"token constant\">ALL_PERSONS</span><span class=\"token punctuation\">,</span>\n        data<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> allPersons <span class=\"token operator\">:</span> dataInStore<span class=\"token punctuation\">.</span>allPersons<span class=\"token punctuation\">.</span><span class=\"token function\">concat</span><span class=\"token punctuation\">(</span>addedPerson<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>   \n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">useSubscription</span><span class=\"token punctuation\">(</span><span class=\"token constant\">PERSON_ADDED</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onSubscriptionData</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> subscriptionData <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> addedPerson <span class=\"token operator\">=</span> subscriptionData<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>personAdded\n      <span class=\"token function\">notify</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>addedPerson<span class=\"token punctuation\">.</span>name<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> added</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">updateCacheWith</span><span class=\"token punctuation\">(</span>addedPerson<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La función <em>updateCacheWith</em> también se puede utilizar en <em>PersonForm</em> para la actualización de la caché:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PersonForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> setError<span class=\"token punctuation\">,</span> updateCacheWith <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>  <span class=\"token comment\">// ...</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span> createPerson <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useMutation</span><span class=\"token punctuation\">(</span><span class=\"token constant\">CREATE_PERSON</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function-variable function\">onError</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">error</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>graphQLErrors<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token function-variable function\">update</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">store<span class=\"token punctuation\">,</span> response</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token function\">updateCacheWith</span><span class=\"token punctuation\">(</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>addPerson<span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n   \n  <span class=\"token comment\">// ..</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>El código final del cliente puede ser que se encuentra en <a href=\"https://github.com/fullstack-hy2020/graphql-phonebook-frontend/tree/part8-9\">Github</a>, rama <i>part8-9</i>.</p>\n<h3>problema n+1</h3>\n<p>Agreguemos algunas cosas al backend. Modifiquemos el esquema para que un tipo <i>Person</i> tenga un campo <em>friendOf</em>, que indica en qué lista de amigos está la persona.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type Person <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> String<span class=\"token operator\">!</span>\n  phone<span class=\"token operator\">:</span> String\n  address<span class=\"token operator\">:</span> Address<span class=\"token operator\">!</span>\n  friendOf<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>User<span class=\"token operator\">!</span><span class=\"token punctuation\">]</span><span class=\"token operator\">!</span>\n  id<span class=\"token operator\">:</span> <span class=\"token constant\">ID</span><span class=\"token operator\">!</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>La aplicación debe admitir la siguiente consulta:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">findPerson</span><span class=\"token punctuation\">(</span>name<span class=\"token operator\">:</span> <span class=\"token string\">\"Leevi Hellas\"</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    friendOf<span class=\"token punctuation\">{</span>\n      username\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Debido a que <em>friendOf</em> no es un campo de objetos <i>Person</i> en la base de datos, tenemos que crear un solucionador para él, que puede resolver este problema. Primero creemos un resolutor que devuelva una lista vacía:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">address</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span> \n      street<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>street<span class=\"token punctuation\">,</span>\n      city<span class=\"token operator\">:</span> root<span class=\"token punctuation\">.</span>city\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token function-variable function\">friendOf</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token comment\">// return list of users </span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">]</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>El parámetro <em>root</em> es el objeto de persona cuya lista de amigos se está creando, por lo que buscamos entre todos los objetos <em>User</em> los que tienen root._id en su lista de amigos:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">  Person<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// ...</span>\n    <span class=\"token function-variable function\">friendOf</span><span class=\"token operator\">:</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> friends <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> User<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n        friends<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          $<span class=\"token keyword\">in</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>root<span class=\"token punctuation\">.</span>_id<span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">}</span> \n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n\n      <span class=\"token keyword\">return</span> friends\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span></code></pre></div>\n<p>Ahora la aplicación funciona.</p>\n<p>Inmediatamente podemos hacer consultas aún más complicadas. Es posible, por ejemplo, encontrar los amigos de todos los usuarios:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n    friendOf <span class=\"token punctuation\">{</span>\n      username\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Sin embargo, hay un problema con nuestra solución, hace una cantidad irrazonable de consultas a la base de datos. Si registramos todas las consultas en la base de datos y tenemos 5 personas guardadas, vemos lo siguiente:</p>\n<pre>\nPerson.find\nUser.find\nUser.find\nUser.find\nUser.find\nUser.find\n</pre>\n<p>Así que aunque principalmente hacen una consulta para todas las personas, cada persona genera una consulta más en su resolución.</p>\n<p>Esta es una manifestación del famoso <a href=\"https://www.google.com/search?q=n%2B1+problem\">n+1-problema</a>, que aparece de vez en cuando en diferentes contextos y, a veces, se cuela sobre los desarrolladores sin que se den cuenta.</p>\n<p>Una buena solución para el problema n + 1 depende de la situación. A menudo, requiere el uso de algún tipo de consulta de combinación en lugar de varias consultas independientes.</p>\n<p>En nuestra situación, la solución más fácil sería guardar la lista de amigos en la que se encuentran en cada objeto <em>Person</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> schema <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">mongoose<span class=\"token punctuation\">.</span>Schema</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    unique<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  street<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>  \n  city<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    type<span class=\"token operator\">:</span> String<span class=\"token punctuation\">,</span>\n    required<span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    minlength<span class=\"token operator\">:</span> <span class=\"token number\">5</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">  friendOf<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span></span><span class=\"gatsby-highlight-code-line\">      type<span class=\"token operator\">:</span> mongoose<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>Types<span class=\"token punctuation\">.</span>ObjectId<span class=\"token punctuation\">,</span></span><span class=\"gatsby-highlight-code-line\">      ref<span class=\"token operator\">:</span> <span class=\"token string\">'User'</span></span><span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> </span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Entonces podríamos hacer una \"consulta de unión\", o rellenar los campos <em>friendOf</em> de personas cuando buscamos los objetos <em>Person</em>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Query<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">allPersons</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">root<span class=\"token punctuation\">,</span> args</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>    \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Person.find'</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>args<span class=\"token punctuation\">.</span>phone<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'friendOf'</span><span class=\"token punctuation\">)</span></span>    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> Person<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> phone<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> $exists<span class=\"token operator\">:</span> args<span class=\"token punctuation\">.</span>phone <span class=\"token operator\">===</span> <span class=\"token string\">'YES'</span> <span class=\"token punctuation\">}</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token punctuation\">.</span><span class=\"token function\">populate</span><span class=\"token punctuation\">(</span><span class=\"token string\">'friendOf'</span><span class=\"token punctuation\">)</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Después del cambio, no necesitaríamos un solucionador separado para el campo <em>friendOf</em>.</p>\n<p>La consulta allPersons <i>no causa</i> un problema n + 1, si solo obtenemos el nombre y el número de teléfono:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allPersons <span class=\"token punctuation\">{</span>\n    name\n    phone\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Si modificamos <em>allPersons</em> para hacer una consulta de combinación porque a veces causa un problema n + 1, se vuelve más pesado cuando no necesitamos la información sobre personas relacionadas. Al usar el <a href=\"https://www.apollographql.com/docs/apollo-server/data/data/#resolver-type-signature\">cuarto parámetro</a> de las funciones de resolución, podríamos optimizar la consulta aún más. El cuarto parámetro se puede usar para inspeccionar la consulta en sí, por lo que podríamos realizar la consulta de combinación solo en casos con una amenaza predicha para un problema n + 1. Sin embargo, no deberíamos saltar a este nivel de optimización antes de estar seguros de que vale la pena.</p>\n<p><a href=\"https://en.wikiquote.org/wiki/Donald_Knuth\">En palabras de Donald Knuth</a>:</p>\n<blockquote>\n<p><i>Los programadores pierden una enorme cantidad de tiempo pensando o preocupándose por la velocidad de las partes no críticas de sus programas, y estos intentos de eficiencia en realidad tienen un fuerte impacto negativo cuando se consideran la depuración y el mantenimiento. Deberíamos olvidarnos de las pequeñas eficiencias, digamos alrededor del 97% del tiempo: <strong>la optimización prematura es la raíz de todos los males.</strong></i></p>\n</blockquote>\n<p><a href=\"https://github.com/facebook/dataloader\">DataLoader</a> de Facebook ofrece una buena solución para el problema n + 1 entre otros problemas.\nMás sobre el uso de DataLoader con el servidor Apollo [aquí] (<a href=\"https://www.robinwieruch.de/graphql-apollo-server-tutorial/#graphql-server-data-loader-caching-batching\">https://www.robinwieruch.de/graphql-apollo-server-tutorial/#graphql-server-data-loader-caching-batching</a>) y <a href=\"http://www.petecorey.com/blog/2017/08/14/batching-graphql-queries-with-dataloader/\">aquí</a>.</p>\n<h3>Epílogo</h3>\n<p>La aplicación que creamos en esta parte no está estructurada de manera óptima: el esquema, las consultas y las mutaciones deben al menos moverse fuera del código de la aplicación. En Internet se pueden encontrar ejemplos para una mejor estructuración de las aplicaciones GraphQL. Por ejemplo, para el servidor <a href=\"https://blog.apollographql.com/modularizing-your-graphql-schema-code-d7f71d5ed5f2\">aquí</a> y el cliente <a href=\"https://medium.com/@peterpme/thoughts-on-structuring-your-apollo-queries-mutations-939ba4746cd8\">aquí</a>.</p>\n<p>GraphQL ya es una tecnología bastante antigua, que ha sido utilizada por Facebook desde 2012, por lo que ya podemos verla como \"probada en batalla\". Desde que Facebook publicó GraphQL en 2015, poco a poco ha recibido más y más atención, y en un futuro cercano podría amenazar el dominio de REST. La muerte de REST también ha sido [predicha] (<a href=\"https://www.stridenyc.com/podcasts/52-is-2018-the-year-graphql-kills-rest\">https://www.stridenyc.com/podcasts/52-is-2018-the-year-graphql-kills-rest</a>). Aunque eso no sucederá todavía, GraphQL es absolutamente digno de [aprender] (<a href=\"https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/\">https://blog.graphqleditor.com/javascript-predictions-for-2019-by-npm/</a>).</p>\n</div>\n<div class=\"tasks\">\n<h3>Ejercicios 8.23.-8.26.</h3>\n<h4>8.23: Suscripciones - servidor</h4>\n<p>Realiza una implementación de backend para la suscripción <em>bookAdded</em>,</p>\n<h4>8.24: Suscripciones - cliente, parte 1</h4>\n<p>Comience a usar suscripciones en el cliente y suscríbase a <em>bookAdded</em>. Cuando se agregan nuevos libros, notifique al usuario. Cualquier método funciona. Por ejemplo, puede utilizar la función <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Window/alert\">window.alert</a>.</p>\n<h4>8.25: Suscripciones - cliente, parte 2</h4>\n<p>Mantenga actualizada la vista de la aplicación cuando el servidor notifique sobre nuevos libros. Puede probar su implementación abriendo la aplicación en dos pestañas del navegador y agregando un nuevo libro en una pestaña. Agregar el nuevo libro debería actualizar la vista en ambas pestañas.</p>\n<h4>8.26: n + 1</h4>\n<p>Resuelve el problema n + 1 de la siguiente consulta usando cualquier método que te guste</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">query <span class=\"token punctuation\">{</span>\n  allAuthors <span class=\"token punctuation\">{</span>\n    name \n    bookCount\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Este fue el último ejercicio de esta parte del curso y es hora de enviar tu código a GitHub y marcar todos tus ejercicios terminados en el <a href=\"https://studies.cs.helsinki.fi/stats/courses/fullstackopen\">sistema de envío de ejercicios</a>.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/255b3daaf137d97fa5b78561e6ef4e3f/part-8.svg"},"part":8,"letter":"e","lang":"es"}}},"pageContext":{"part":8,"letter":"e","lang":"es"}}}