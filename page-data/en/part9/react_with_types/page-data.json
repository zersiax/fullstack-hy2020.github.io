{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part9/react_with_types","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before we start delving into how you can use TypeScript with React, we should first have a look at what we want to achieve. When everything works as it should, TypeScript will help us catch the following errors:</p>\n<ul>\n<li>Trying to pass an extra/unwanted prop to a component</li>\n<li>Forgetting to pass a required prop to a component</li>\n<li>Passing a prop of a wrong type to a component</li>\n</ul>\n<p>If we make any of these errors, TypeScript can help us catch them in our editor right away.\nIf we didn't use TypeScript, we would have to catch these errors later during testing.\nWe might be forced to do some tedious debugging to find the cause of the errors. </p>\n<p>That's enough reasoning for now, let's start getting our hands dirty!</p>\n<h3>Create React App with TypeScript</h3>\n<p>We can use <a href=\"https://create-react-app.dev\">create-react-app</a> to create a TypeScript app by adding a\n<i>template</i> argument to the initialisation script. So in order to create a TypeScript Create React App, run the following command:</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">npx create-react-app my-app --template typescript</code></pre></div>\n<p>After running the command, you should have a complete basic react app which uses TypeScript.\nYou can start the app by running <i>npm start</i> in the application's root. </p>\n<p>If you take a look at the files and folders, you'll notice that the app is not that different from\none using pure JavaScript. The only differences are, that the <i>.js</i> and <i>.jsx</i> files are now  <i>.ts</i> and <i>.tsx</i> files, they contain some type annotations, and the root directory contains a <i>tsconfig.json</i> file.</p>\n<p>Now, let's take a look at the <i>tsconfig.json</i> file that has been created for us.\nEverything in it should be more or less fine, except at the moment the configuration allows compiling JavaScript files, because <i>allowJs</i> is set to <i>true</i>.\nThat would be fine if you need to mix TypeScript and JavaScript (e.g. if you are in the process of transforming a JavaScript project into TypeScript or something like that), but we want to create a pure TypeScript app, so let's change that configuration to  <i>false</i>.</p>\n<p>In our previous project we used eslint to help us enforce coding style, and we'll do the same with this app. We do not need to install any dependencies, since create-react-app has taken care of that already.</p>\n<p>We configure eslint in <i>.eslintrc</i> with following settings:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"env\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"browser\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"es6\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"jest\"</span><span class=\"token operator\">:</span> <span class=\"token boolean\">true</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"extends\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token string\">\"eslint:recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:react/recommended\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"plugin:@typescript-eslint/recommended\"</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"plugins\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"react\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"@typescript-eslint\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"settings\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"react\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token string\">\"pragma\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"React\"</span><span class=\"token punctuation\">,</span>\n      <span class=\"token string\">\"version\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"detect\"</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"rules\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token string\">\"@typescript-eslint/explicit-function-return-type\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    <span class=\"token string\">\"@typescript-eslint/explicit-module-boundary-types\"</span><span class=\"token operator\">:</span> <span class=\"token number\">0</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Since the return type of basically all React components is <i>JSX.Element</i> or <i>null</i>, we have loosened the default linting rules up a bit by disabling the rules <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-function-return-type.md\">explicit-function-return-type</a> and <a href=\"https://github.com/typescript-eslint/typescript-eslint/blob/master/packages/eslint-plugin/docs/rules/explicit-module-boundary-types.md\">explicit-module-boundary-types</a> .\nNow we don't need to explicitly state our function return types everywhere.</p>\n<p>Next we need to get our linting script to parse <i>*.tsx </i> files, which are the TypeScript equivalent of react's JSX files.\nWe can do that by altering our lint command in <i>.package.json</i> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"json\"><pre class=\"language-json\"><code class=\"language-json\"><span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n    <span class=\"token property\">\"scripts\"</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token property\">\"start\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts start\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"build\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts build\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"test\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts test\"</span><span class=\"token punctuation\">,</span>\n    <span class=\"token property\">\"eject\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"react-scripts eject\"</span><span class=\"token punctuation\">,</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token property\">\"lint\"</span><span class=\"token operator\">:</span> <span class=\"token string\">\"eslint './src/**/*.{ts,tsx}'\"</span></span>  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If you are using Windows, you may need to use double quotes for the linting path: <code class=\"language-text\">&quot;lint&quot;: &quot;eslint \\&quot;./src/**/*.{ts,tsx}\\&quot;&quot;</code>.</p>\n<h3>React components with TypeScript</h3>\n<p>Let us consider the following JavaScript React example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">'react-dom'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> PropTypes <span class=\"token keyword\">from</span> <span class=\"token string\">\"prop-types\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token parameter\">props</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nWelcome<span class=\"token punctuation\">.</span>propTypes <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> PropTypes<span class=\"token punctuation\">.</span>string\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the example we have a component called <i>Welcome</i> which we pass a <i>name</i> as a prop. It then renders the name to the screen.  We know that the <i>name</i> should be a string, and we use the <a href=\"https://www.npmjs.com/package/prop-types\">prop-types</a> package introduced in <a href=\"/en/part5/props_children_and_proptypes#prop-types\">part 5</a> to receive hints about the desired types of component's props and warnings about invalid prop types. </p>\n<p>With TypeScript we don't need the <i>prop-types</i> package anymore. We can define the types with the help of TypeScript just like we define types for a regular function as react components are nothing but merely functions. We will use an interface for the parameters types (i.e., props) and <i>JSX.Element</i> as return type for any react component.</p>\n<p>For example:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComp1</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Typescript automatically infers the return type of this function </span>\n  <span class=\"token comment\">// (i.e., a react component) as `JSX.Element`.</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Typescript has auto inference!</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComp2 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">Element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We are explicitly defining the return type of a function here </span>\n  <span class=\"token comment\">// (i.e., a react component).</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Typescript React is easy.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">MyProps</span><span class=\"token punctuation\">{</span>\n  label<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  price<span class=\"token operator\">?</span><span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> MyComp3 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> MyProps<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token constant\">JSX</span><span class=\"token punctuation\">.</span><span class=\"token parameter\">Element</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We are explicitly defining the parameter types using interface `MyProps` </span>\n  <span class=\"token comment\">// and return types as `JSX.Element` in this function (i.e., a react component).</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Typescript is great.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">MyComp4</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">,</span> price<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>label<span class=\"token operator\">:</span> string<span class=\"token punctuation\">,</span> price<span class=\"token operator\">:</span> number<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// We are explicitly defining the parameter types using an inline interface </span>\n  <span class=\"token comment\">// and typescript automatically infers the return type as JSX.Element of the function (i.e., a react component).</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">There is nothing like typescript.</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, lets return to our code example and see how we would define the type for the <i>Welcome</i> component in TypeScript.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">WelcomeProps</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> WelcomeProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>props<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> element <span class=\"token operator\">=</span> <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Welcome</span></span> <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Sara<span class=\"token punctuation\">\"</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">;</span>\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We defined a new type <em>WelcomeProps</em> and passed to the function's parameter types.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">props<span class=\"token operator\">:</span> WelcomeProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></code></pre></div>\n<p>You could write the same thing using a less verbose syntax:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">Welcome</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> name <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> name<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">Hello, </span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now our editor knows that the <i>name</i> prop is a string. </p>\n<p>For some reason eslint is not satisfied, and complains <i>'name' is missing in props validation</i>. This happens because the react linting rules expect us to define propTypes for all props.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 9.14.</h3>\n<h4>9.14.</h4>\n<p>Create a new Create React App with TypeScript, and set up eslint for the project similarly to how we just did.</p>\n<p>This exercise is similar to the one you have already done in <a href=\"/en/part1/java_script#exercises-1-3-1-5\">Part 1</a> of the course, but with TypeScript and some extra tweaks. Start off by modifying the contents of <i>index.tsx</i> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">\"react\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> ReactDOM <span class=\"token keyword\">from</span> <span class=\"token string\">\"react-dom\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">import</span> App <span class=\"token keyword\">from</span> <span class=\"token string\">\"./App\"</span><span class=\"token punctuation\">;</span>\n\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">App</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token punctuation\">,</span> document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"root\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and <i>App.tsx</i> to the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">import</span> React <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> courseName <span class=\"token operator\">=</span> <span class=\"token string\">\"Half Stack application development\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> courseParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n      exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">10</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n      exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">7</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      name<span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n      exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">14</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>courseName<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>h1</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span><span class=\"token plain-text\"> </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n        Number of exercises</span><span class=\"token punctuation\">{</span><span class=\"token string\">\" \"</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token punctuation\">{</span>courseParts<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">carry<span class=\"token punctuation\">,</span> part</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> carry <span class=\"token operator\">+</span> part<span class=\"token punctuation\">.</span>exerciseCount<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>p</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> App<span class=\"token punctuation\">;</span></code></pre></div>\n<p>and remove the unnecessary files.</p>\n<p>The whole app is now in one component. That is not what we want, so refactor the code so that it consists of three components: <i>Header</i>,  <i>Content</i> and <i>Total</i>. All data is still kept in the <i>App</i> component, which passes all necessary data to each component as props. <i>Be sure to add type declarations for each component's props!</i> </p>\n<p>The <i>Header</i> component should take care of rendering the name of the course. <i>Content</i> should render the names of the different parts and the amount of exercises in each part, and <i>Total</i> should render the total sum of exercises in all parts.</p>\n<p>The <i>App</i> component should look somewhat like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">App</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// const-declarations</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Header</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>courseName<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Content</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Total</span></span> <span class=\"token attr-name\">...</span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Deeper type usage</h3>\n<p>In the previous exercise we had three parts of a course, and all parts had the same attributes <i>name</i> and <i>exerciseCount</i>. But what if we had the need for additional attributes for the parts and each part would have the need for different attributes? How would this look codewise? Let's consider the following example:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> courseParts <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">\"This is an awesome course part\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    groupProjectCount<span class=\"token operator\">:</span> <span class=\"token number\">3</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">\"Confusing description\"</span><span class=\"token punctuation\">,</span>\n    exerciseSubmissionLink<span class=\"token operator\">:</span> <span class=\"token string\">\"https://fake-exercise-submit.made-up-url.dev\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the above example we have added some additional attributes to each course part.\nEach part has the <i>name</i> and <i>exerciseCount</i> attributes,\nbut the first and the third also have an attribute called <i>description</i> and\nthe second and the third part also have some distinct additional attributes.</p>\n<p>Let's imagine that our application just keeps on growing, and we need to pass the different course parts around in our code.\nOn top of that, there is also additional attributes and course parts added to the mix.\nHow can we know that our code is capable of handling all the different types of data correctly, and we are not for example forgetting to render a new course part on some page? This is where TypeScript really comes handy!</p>\n<p>Let's start by defining types for our different course parts:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartOne</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartTwo</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  groupProjectCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartThree</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseSubmissionLink<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Next we will create a type <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#union-types\">union</a> of all these types.\nWe can then use it to define a type for our array, which should accept any of these course part types:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type CoursePart <span class=\"token operator\">=</span> CoursePartOne <span class=\"token operator\">|</span> CoursePartTwo <span class=\"token operator\">|</span> CoursePartThree<span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now we can set the type for our <i>courseParts</i> variable.\nNow our editor will automatically warn us if we use a wrong type for an attribute, use an extra attribute, or forget to set an expected attribute.\nYou can test this by commenting out any attribute for any course part.\nThanks to the <i>name</i> <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#literal-types\">string literal</a> TypeScript can identify which course part requires which additional attributes, even if the variable is defined to use the type union.</p>\n<p>But we're not satisfied yet! There is still a lot of duplication in our types, and we want to avoid that.\nWe start off by identifying the attributes all course parts have in common, and defining a base type which contains them.\nThen we will <a href=\"https://www.typescriptlang.org/docs/handbook/2/objects.html#extending-types\">extend</a> that base type to create our part specific types:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartOne</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartTwo</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">;</span>\n  groupProjectCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartThree</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseSubmissionLink<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>How should we now use these types in our components?</p>\n<p>One handy way to use these kind of types in TypeScript is by using <em>switch case</em> expressions. Once you have either explicitly declared or TypeScript has inferred that a variable is of type union and each type in the type union contains a certain attribute,\nwe can use that as a type identifier.\nWe can then build a switch case around that attribute and TypeScript will know which attributes are available within each case block.</p>\n<picture><img src=\"/static/014a9c399567cd50b581b77d691ce1e4/5a190/32.png\" srcset=\"/static/014a9c399567cd50b581b77d691ce1e4/772e8/32.png 200w,\n/static/014a9c399567cd50b581b77d691ce1e4/e17e5/32.png 400w,\n/static/014a9c399567cd50b581b77d691ce1e4/5a190/32.png 800w,\n/static/014a9c399567cd50b581b77d691ce1e4/c1b63/32.png 1200w,\n/static/014a9c399567cd50b581b77d691ce1e4/7f15f/32.png 1530w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>In the above example TypeScript knows that a <i>coursePart</i> has the type <i>CoursePart</i>. It can then infer that <i>part</i> is of either type <i>CoursePartOne</i>, <i>CoursePartTwo</i> or <i>CoursePartThree</i>.\nThe <i>name</i> is distinct for each type, so we can use it to identify each type and TypeScript can let us know which attributes are available in each case block.\nTypeScript will then produce an error if you e.g. try to use the <i>part.description</i> within the <i>\"Using props to pass data\"</i> block.</p>\n<p>What about adding new types? If we were to add a new course part, wouldn't it be nice to know if we had already implemented handling that type in our code?\nIn the example above, a new type would go to the <i>default</i> block and nothing would get printed for a new type.\nOf course sometimes this is totally acceptable, for example if you want to handle only specific (not all) cases of a type union, but in most cases it is recommended to handle all variations separately.</p>\n<p>With TypeScript we can use a method called <i>exhaustive type checking</i>. Its basic principle is that if we encounter an unexpected value, we call a function that accepts a value with the type <a href=\"https://www.typescriptlang.org/docs/handbook/2/narrowing.html#the-never-type\">never</a> and also has the return type <i>never</i>.</p>\n<p>A straight forward version of the function could look like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">/**\n * Helper function for exhaustive type checking\n */</span>\n<span class=\"token keyword\">const</span> assertNever <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>value<span class=\"token operator\">:</span> never<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">never</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span>\n    <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">Unhandled discriminated union member: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token constant\">JSON</span><span class=\"token punctuation\">.</span><span class=\"token function\">stringify</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>If we now were to replace the contents of our <i>default</i> block to:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">assertNever</span><span class=\"token punctuation\">(</span>part<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and would also comment out the <i>Deeper type usage</i> case block, we would see the following error:</p>\n<picture><img src=\"/static/d94b51bc904103fcd81e341f385907a8/5a190/33.png\" srcset=\"/static/d94b51bc904103fcd81e341f385907a8/772e8/33.png 200w,\n/static/d94b51bc904103fcd81e341f385907a8/e17e5/33.png 400w,\n/static/d94b51bc904103fcd81e341f385907a8/5a190/33.png 800w,\n/static/d94b51bc904103fcd81e341f385907a8/efc66/33.png 885w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The error message says that <i>Argument of type 'CoursePartThree' is not assignable to parameter of type 'never'</i>, which tells us that we are using a variable somewhere where it should never be used. This tells us that something needs to be fixed.\nWhen we remove the comments from the <i>Deeper type usage</i> case block, you will see that the error goes away.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 9.15.</h3>\n<h4>9.15.</h4>\n<p>First add the type information to <i>App.tsx</i> and replace the variable <i>courseParts</i> with the one from the example below.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// new types</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  type<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CourseNormalPart</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CourseProjectPart</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"groupProject\"</span><span class=\"token punctuation\">;</span>\n  groupProjectCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">CourseSubmissionPart</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"submission\"</span><span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseSubmissionLink<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\ntype CoursePart <span class=\"token operator\">=</span> CourseNormalPart <span class=\"token operator\">|</span> CourseProjectPart <span class=\"token operator\">|</span> CourseSubmissionPart<span class=\"token punctuation\">;</span>\n\n\n<span class=\"token comment\">// this is the new coursePart variable</span>\n<span class=\"token keyword\">const</span> courseParts<span class=\"token operator\">:</span> CoursePart<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Fundamentals\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">\"This is the leisured course part\"</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Advanced\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">\"This is the harded course part\"</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"normal\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Using props to pass data\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span>\n    groupProjectCount<span class=\"token operator\">:</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"groupProject\"</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span>\n    name<span class=\"token operator\">:</span> <span class=\"token string\">\"Deeper type usage\"</span><span class=\"token punctuation\">,</span>\n    exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">14</span><span class=\"token punctuation\">,</span>\n    description<span class=\"token operator\">:</span> <span class=\"token string\">\"Confusing description\"</span><span class=\"token punctuation\">,</span>\n    exerciseSubmissionLink<span class=\"token operator\">:</span> <span class=\"token string\">\"https://fake-exercise-submit.made-up-url.dev\"</span><span class=\"token punctuation\">,</span>\n    type<span class=\"token operator\">:</span> <span class=\"token string\">\"submission\"</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span></code></pre></div>\n<p>Now we know that both interfaces <i>CourseNormalPart</i> and <i>CourseSubmissionPart</i> share not only the base attributes, but also an attribute called <i>description</i>, which is a string in both interfaces. </p>\n<p>Your first task is to to declare a new interface, that includes the <i>description</i> attribute and extends the <i>CoursePartBase</i> interface. Then modify the code so that you can remove the <i>description</i> attribute from both <i>CourseNormalPart</i> and <i>CourseSubmissionPart</i> without getting any errors.</p>\n<p>Then create a component <i>Part</i> that renders all attributes of each type of course part. Use a switch case -based exhaustive type checking! Use the new component in component <i>Content</i>.</p>\n<p>Lastly, add another course part interface with the following attributes: <i>name</i>, <i>exerciseCount</i>,  <i>description</i> and <i>requirements</i> that is an string array. The objects of this type look like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> <span class=\"token string\">\"Backend development\"</span><span class=\"token punctuation\">,</span>\n  exerciseCount<span class=\"token operator\">:</span> <span class=\"token number\">21</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span> <span class=\"token string\">\"Typing the backend\"</span><span class=\"token punctuation\">,</span>\n  requirements<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">\"nodejs\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"jest\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"special\"</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Then add that interface to the type union <i>CoursePart</i> and add corresponding data to the <i>courseParts</i> variable. Now if you have not modified your <i>Content</i> component correctly, you should get an error, because you have not yet added support for the fourth course part type. Do the necessary changes to <i>Content</i>, so that all attributes for the new course part also get rendered and that the compiler doesn't produce any errors.</p>\n<p>The end result might look like the following</p>\n<picture><img src=\"/static/b250cbeee382069b5352275d6591d469/5a190/45.png\" srcset=\"/static/b250cbeee382069b5352275d6591d469/772e8/45.png 200w,\n/static/b250cbeee382069b5352275d6591d469/e17e5/45.png 400w,\n/static/b250cbeee382069b5352275d6591d469/5a190/45.png 800w,\n/static/b250cbeee382069b5352275d6591d469/c1b63/45.png 1200w,\n/static/b250cbeee382069b5352275d6591d469/6f278/45.png 1488w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>A note about defining object types</h3>\n<p>We have used <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#interfaces\">interfaces</a> to define object types, e.g. diary entries, in previous section</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">DiaryEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>and course part in this section</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">CoursePartBase</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  exerciseCount<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We actually could have had the same effect by using a <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#type-aliases\">type alias</a></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type DiaryEntry <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> number<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  weather<span class=\"token operator\">:</span> Weather<span class=\"token punctuation\">;</span>\n  visibility<span class=\"token operator\">:</span> Visibility<span class=\"token punctuation\">;</span>\n  comment<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> </code></pre></div>\n<p>In most cases you can use either <i>type</i> or <i>interface</i>, whichever syntax you prefer. However there are a few things to keep in mind.\nFor example if you define multiple interfaces with the same name, they will result in a merged interface, whereas if you try to define multiple types with the same name, it will result in an error stating that a type with the same name is already declared. </p>\n<p>TypeScript documentation <a href=\"https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces\">recommends using interfaces</a> in most cases.</p>\n<h3>Working with an existing codebase</h3>\n<p>When diving into an existing codebase for the first time it is good to get an overall view of the conventions and structure of the project. You can start your research by reading the <i>README.md</i> in the root of the repository. Usually the README contains a brief description of the application and the requirements for using it, as well as how to start it for development.\nIf README is not available or someone has \"saved time\" and left it as a stub, you can take a peek at the <i>package.json</i>.\nIt is always a good idea to start the application and click around to verify you have a functional development environment. </p>\n<p>You can also browse the folder structure to get insight into the application's functionality and/or the architecture used.\nThese are not always clear, and the developers might have chosen a way to organize code that is not familiar to you.\nThe <a href=\"https://github.com/fullstack-hy/patientor\">sample project</a> used in the rest of this part is organized featurewise.\nYou can see what pages the application has, and some general components, e.g. modals and state.\nKeep in mind that the features may have\ndifferent scopes. For example modals are visible UI level components whereas the state is comparable to business logic\nand keeps the data organized under the hood for the rest of the app to use. </p>\n<p>TypeScript provides you types which tell you what kind of data structures, functions, components and state to expect.\nYou can try to look for <i>types.ts</i> or something similar to get you started.\nVSCode is a big help and just highlighting variables and parameters can give you quite a lot of insight.\nAll this naturally depends on how types are used in the project. </p>\n<p>If the project has unit, integration or end-to-end tests, reading those is most likely beneficial.\nTest cases are your most important tool when refactoring or creating new features to the application. You want to make sure not to break any existing features when hammering around the code.\nTypeScript can also give you guidance with argument and return types when changing the code.</p>\n<p>Do remember that reading code is a skill in itself,\nand don't worry if you don't understand the code on your first readthrough.\nCode may have a lot of corner cases, and pieces of logic may have been added here and there throughout its development cycle.\nIt is hard to imagine what kind of troubles the previous developer has been wrestling with.\nThink of it all like <a href=\"https://en.wikipedia.org/wiki/Dendrochronology#Growth_rings\">growth rings in trees</a>.\nUnderstanding all of it requires digging deep into the code and business domain requirements. The more code you read the better you're going to be at it. You will read more code than you're going to produce.</p>\n<h3>Patientor frontend</h3>\n<p>It's time to get our hands dirty finalizing the frontend for the backend we built in <a href=\"/en/part9/typing_the_express_app\">exercises 9.8.-9.13</a>.</p>\n<p>Before diving into the code, let us start both the frontend and the backend.</p>\n<p>If all goes well you should see a patient listing page. It fetches a list of patients from our backend, and renders it to the screen as a simple table. There is also a button for creating new patients to the backend.\nAs we are using mock data instead of a database, the data will not persist - closing the backend will\ndelete all the data we have added.\nUI design has clearly not been a strong point of the creators, so let's disregard the UI for now.</p>\n<p>After verifying that everything works, we can start studying the code.\nAll the interesting stuff resides in the <i>src</i> folder.\nFor your convenience there is also a ready <i>types.ts</i> file for basic types used in the app, which you will have to extend or refactor in the exercises.</p>\n<p>In principle we could use the same types for both backend and frontend, but usually the frontend has different data structures and use cases for the data, which causes the types to be different.\nFor example the frontend has a state, and may want to keep data in objects or maps whereas the backend\nuses an array.  The frontend might also not need all the fields of a data object saved in the backend, and it may need to add some new fields to use for rendering.</p>\n<p>The folder structure looks as follows:</p>\n<picture><img src=\"/static/4cf9fc56719dbd15de3f796bc0cc3945/5a190/34a.png\" srcset=\"/static/4cf9fc56719dbd15de3f796bc0cc3945/772e8/34a.png 200w,\n/static/4cf9fc56719dbd15de3f796bc0cc3945/e17e5/34a.png 400w,\n/static/4cf9fc56719dbd15de3f796bc0cc3945/5a190/34a.png 800w,\n/static/4cf9fc56719dbd15de3f796bc0cc3945/c1b63/34a.png 1200w,\n/static/4cf9fc56719dbd15de3f796bc0cc3945/29007/34a.png 1600w,\n/static/4cf9fc56719dbd15de3f796bc0cc3945/27f8b/34a.png 1730w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As you would expect, currently there are two main components: <i>AddPatientModal</i> and <i>PatientListPage</i>. The <i>state/</i> folder contains state handling for the frontend.\nThe main functionality of the code in <i>state</i> folder is to keep our data in one place and offer simple actions to alter the state of our app.</p>\n<h3>State handling</h3>\n<p>Let's study the state handling a bit closer as a lot of stuff seems to be happening under the hood and it differs a bit from the methods used in the course so far. </p>\n<p>The state management is built using React Hooks <a href=\"https://reactjs.org/docs/hooks-reference.html#usecontext\">useContext</a> and <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer</a>.\nThis is quite a good setup because we know the app will be rather small and we don't want to use <i>redux</i> or other similiar libraries for the state management.\nThere are a lot of good material, for example  <a href=\"https://medium.com/@seantheurgel/react-hooks-as-state-management-usecontext-useeffect-usereducer-a75472a862fe\">this article</a>, about this approach to state management.</p>\n<p>The approach taken in this app uses the React <a href=\"https://reactjs.org/docs/context.html\">context</a>, that according to its documentation</p>\n<blockquote>\n<p><i>... is designed to share data that can be considered \"global\" for a tree of React components, such as the current authenticated user, theme, or preferred language.</i> </p>\n</blockquote>\n<p>In our case the \"global\", shared data is the application state <i>and</i> the dispatch function that is used to make changes to data. In many ways our code works much like redux based state management we used in <a href=\"/en/part6\">part 6</a>, but is more lightweight since it does not require the use of any external libraries.\nThis part assumes that you are at least familiar with the way redux works, e.g. you should have covered at least <a href=\"/en/part6/flux_architecture_and_redux\">the first section</a> of part 6.</p>\n<p>The <a href=\"https://reactjs.org/docs/context.html\">context</a> of our application has a tuple containing the app state and the dispatcher for changing the state.\nThe application state is typed as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  patients<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Patient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The state is an object with one key <i>patients</i>, which has a <a href=\"https://www.typescriptlang.org/docs/handbook/2/indexed-access-types.html\">dictionary</a> or simply put an object with string keys and with a <i>Patient</i> objects as values. The index can only be  a <i>string</i> or a <i>number</i> as you can access the object values using those. This enforces that the state conforms to the form we want, and prevents developers from misusing the state.</p>\n<p>But be aware of one thing! When a type is declared like the type for <i>patients</i>, TypeScript does not actually have any way of knowing if the key you are trying to access actually exists or not.\nSo if we were to try to access a patient by a non-existing id, the compiler would think that the returned value is of type <i>Patient</i> and no error would be thrown when trying to access its properties:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myPatient <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>patients<span class=\"token punctuation\">[</span><span class=\"token string\">'non-existing-id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myPatient<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// no error, TypeScript believes that myPatient is of type Patient</span></code></pre></div>\n<p>To fix this, we could define the type for patient values to be a union of <i>Patient</i> and <i>undefined</i> in the following way:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type State <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  patients<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> Patient <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>That would cause the compiler to give the following warning:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> myPatient <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>patients<span class=\"token punctuation\">[</span><span class=\"token string\">'non-existing-id'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myPatient<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, Object is possibly 'undefined'</span></code></pre></div>\n<p>This type of additional type security is always good to implement if you e.g. use data from external sources or use the value of a user input to access data in your code. But if you are sure that you only handle data that actually exists, then there is no one stopping you from using the first presented solution.</p>\n<p>Even though we are not using them in this course part, it is good to mention that a more type strict way would be to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map\">Map</a> objects, to which you can declare a type for both the key and the content. The Map's accessor function <i>get()</i> always returns a union of the declared value type and undefined, so TypeScript automatically requires you to perform validity checks on data retrieved from a map:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">State</span> <span class=\"token punctuation\">{</span>\n  patients<span class=\"token operator\">:</span> Map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span> Patient<span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token keyword\">const</span> myPatient <span class=\"token operator\">=</span> state<span class=\"token punctuation\">.</span>patients<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'non-existing-id'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// type for myPatient is now Patient | undefined </span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myPatient<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// error, Object is possibly 'undefined'</span>\n\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>myPatient<span class=\"token operator\">?.</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// valid code, but will log 'undefined'</span></code></pre></div>\n<!--\nYou can also think of a scenario where we may have state as a union. Eg. using states type as an indicator whether user has logged in:\n\n```js\nexport type State =\n  | {\n      type: \"Unauthenticated\";\n    }\n  | {\n      type: \"Authenticated\";\n      currentUser: User;\n    };\n```\n\nThis is one way of using TypeScript to help keeping the applications state under control. We know that if the state is in <i>type: \"Authenticated\"</i> we will have a <i>currentUser</i> field in state.\n\nThis matches the arguments that are received from [useReducer](https://reactjs.org/docs/hooks-reference.html#usereducer). hook. Dispatch function takes as parameter objects with of <i>Action</i> which is defined in <i>reducer.ts</i> alongside the actual reducer function defining what the action does to the state returning a new state. \n\nThe main principle in our state management approach is to pass the state to our components through the context and to modify the state using reducers. \n\n-->\n<!-- Just as in the case of redux, all the state manipulation is done by the reducer that is defined in file <i>reducer.ts</i> together with the type <i>Action</i> that looks as follows -->\n<p>Just like with redux, all state manipulation is done by a reducer. It is defined in the file <i>reducer.ts</i> along with the type <i>Action</i> that looks as follows</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Action <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_PATIENT_LIST\"</span><span class=\"token punctuation\">;</span>\n      payload<span class=\"token operator\">:</span> Patient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">|</span> <span class=\"token punctuation\">{</span>\n      type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADD_PATIENT\"</span><span class=\"token punctuation\">;</span>\n      payload<span class=\"token operator\">:</span> Patient<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The reducer looks quite similiar to the ones we wrote in <a href=\"/en/part6\">part 6</a>.\nIt changes the state for each type of action:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> reducer <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>state<span class=\"token operator\">:</span> State<span class=\"token punctuation\">,</span> action<span class=\"token operator\">:</span> Action<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\">State</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>action<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"SET_PATIENT_LIST\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        patients<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span><span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>\n            <span class=\"token punctuation\">(</span><span class=\"token parameter\">memo<span class=\"token punctuation\">,</span> patient</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> <span class=\"token operator\">...</span>memo<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>patient<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> patient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n            <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>patients\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> <span class=\"token string\">\"ADD_PATIENT\"</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">...</span>state<span class=\"token punctuation\">,</span>\n        patients<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">...</span>state<span class=\"token punctuation\">.</span>patients<span class=\"token punctuation\">,</span>\n          <span class=\"token punctuation\">[</span>action<span class=\"token punctuation\">.</span>payload<span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> action<span class=\"token punctuation\">.</span>payload\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n      <span class=\"token keyword\">return</span> state<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The main difference is  that the state is now a dictionary (or an object), instead of an array that we used in <a href=\"/en/part6\">part 6</a>.</p>\n<p>There are a lot of things happening in the file <i>state.ts</i>, which takes care of setting up the context.\nThe main ingredient is the <a href=\"https://reactjs.org/docs/hooks-reference.html#usereducer\">useReducer</a> hook\nused to create the state and the dispatch-function, and pass them on to the <a href=\"https://reactjs.org/docs/context.html#contextprovider\">context provider</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">StateProvider</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  reducer<span class=\"token punctuation\">,</span>\n  children\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> StateProviderProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useReducer</span><span class=\"token punctuation\">(</span>reducer<span class=\"token punctuation\">,</span> initialState<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span>  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token operator\">&lt;</span>StateContext<span class=\"token punctuation\">.</span>Provider value<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">[</span>state<span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span></span>      <span class=\"token punctuation\">{</span>children<span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StateContext<span class=\"token punctuation\">.</span>Provider<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The provider makes the <i>state</i> and the <i>dispatch</i> functions available in all of the components, thanks to the setup in <i>index.ts</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> reducer<span class=\"token punctuation\">,</span> StateProvider <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./state\"</span><span class=\"token punctuation\">;</span>\n\nReactDOM<span class=\"token punctuation\">.</span><span class=\"token function\">render</span><span class=\"token punctuation\">(</span>\n  <span class=\"token operator\">&lt;</span>StateProvider reducer<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>reducer<span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n    <span class=\"token operator\">&lt;</span>App <span class=\"token operator\">/</span><span class=\"token operator\">></span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>StateProvider<span class=\"token operator\">></span><span class=\"token punctuation\">,</span> \n  document<span class=\"token punctuation\">.</span><span class=\"token function\">getElementById</span><span class=\"token punctuation\">(</span><span class=\"token string\">'root'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>It also defines the <i>useStateValue</i> hook</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">useStateValue</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token function\">useContext</span><span class=\"token punctuation\">(</span>StateContext<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>and the components that need to access the state or dispatcher use it to get hold of those:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStateValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PatientListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> patients <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Don't worry if this seems confusing, it surely is that until you have studied the <a href=\"https://reactjs.org/docs/context.html\">context's documentation</a> and  its use in <a href=\"https://medium.com/@seantheurgel/react-hooks-as-state-management-usecontext-useeffect-usereducer-a75472a862fe\">state management</a>. You do not need to understand all this completely for doing the exercises!</p>\n<p>It is actually a quite common that when you start working on an existing codebase, you do not understand 100% of what happens under the hood in the beginning. If the app has been properly structured (and it has a proper set of tests), you can trust that if you make careful modifications, the app still works despite the fact that you did not understand  all the internal mechanisms. Over the time you will get a grasp on the more unfamiliar parts, but it does not happen overnight when working with a large codebase.</p>\n<h3>Patient listing page</h3>\n<p>Let's go through the <i>PatientListPage/index.ts</i> as you can take inspiration from there to help you fetch data from the backend and update the application's state.\n<i>PatientListPage</i> uses our custom hook to inject the state, and the dispatcher for updating it.\nWhen we list the patients, we only need to destructure the <i>patients</i> property from the state:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStateValue <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"../state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token function-variable function\">PatientListPage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> patients <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> dispatch<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>We also use the app state created with the <i>useState</i> hook for managing modal visibility and form error handling:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>modalOpen<span class=\"token punctuation\">,</span> setModalOpen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>useState<span class=\"token operator\">&lt;</span>boolean<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span>error<span class=\"token punctuation\">,</span> setError<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> React<span class=\"token punctuation\">.</span>useState<span class=\"token operator\">&lt;</span>string <span class=\"token operator\">|</span> <span class=\"token keyword\">undefined</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>We give the <i>useState</i> hook a type parameter, that is then applied to the actual state. So <i>modalOpen</i> is a <i>boolean</i> and <i>error</i> has the type <i>string | undefined</i>.\nBoth set functions returned by the <i>useState</i> hook are functions that accept only arguments according to the type parameter given, eg. the exact type for <i>setModalOpen</i> function is <i>React.Dispatch&#x3C;React.SetStateAction&#x3C;boolean>></i>.</p>\n<p>We also have <i>openModal</i> and <i>closeModal</i> helper functions for better readability and convenience:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> openModal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token function\">setModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> closeModal <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span> <span class=\"token parameter\"><span class=\"token keyword\">void</span></span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">setModalOpen</span><span class=\"token punctuation\">(</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The frontend's types are based on what you have created when developing the backend in the previous part.</p>\n<p>When the component <i>App</i> mounts, it fetches patients from the backend using <a href=\"https://github.com/axios/axios\">axios</a>. Note how we are giving the <i>axios.get</i> function a type parameter to describe the type of the response data:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">React<span class=\"token punctuation\">.</span><span class=\"token function\">useEffect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  axios<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span><span class=\"token keyword\">void</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiBaseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/ping</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">fetchPatientList</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> patients <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span>get<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n        <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiBaseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/patients</span><span class=\"token template-punctuation string\">`</span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_PATIENT_LIST\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> patients <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Something went wrong.'</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">isAxiosError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        errorMessage <span class=\"token operator\">+=</span> <span class=\"token string\">' Error: '</span> <span class=\"token operator\">+</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>message<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">fetchPatientList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>dispatch<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p> <strong>A word of warning!</strong> Passing a type parameter to axios will not validate any data. It is quite dangerous especially if you are using external APIs.\nYou can create custom validation functions which take in the whole payload and return the correct type, or you can use a type guard.\nBoth are valid options. There are also many libraries that provide validation through different kind of schemas, for example <a href=\"https://gcanti.github.io/io-ts/\">io-ts</a>.\nFor simplicity's sake we will continue to trust our own work and trust that we will get data of the correct form from the backend.</p>\n<p>As our app is quite small, we will update the state by simply calling the <i>dispatch</i> function provided to us by the <i>useStateValue</i> hook.\nThe compiler helps by making sure that we dispatch actions according to our <i>Action</i> type with predefined type string and payload:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_PATIENT_LIST\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> patients <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.16.-9.18.</h3>\n<p>We will soon add new type <i>Entry</i> for our app that represents a light weight patient journal entry. It consists of journal text i.e. <i>description</i>, creation date, information regarding the specialist who created it and possible diagnosis codes. Diagnosis codes map to the ICD-10 codes returned from the <i>/api/diagnoses</i> endpoint. Our naive implementation will be that a patient has an array of entries.</p>\n<p>Before going into this, let us do some preparatory work.</p>\n<h4>9.16: patientor, step1</h4>\n<p>Create an endpoint <i>/api/patients/:id</i>  that returns all of the patient information for one patient, including the array of patient entries that is still empty for all the patients. For the time being, expand the backend types as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// eslint-disable-next-line @typescript-eslint/no-empty-interface</span>\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Entry</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">interface</span> <span class=\"token class-name\">Patient</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  ssn<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  occupation<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  gender<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">;</span>\n  dateOfBirth<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"gatsby-highlight-code-line\">  entries<span class=\"token operator\">:</span> Entry<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></span><span class=\"token punctuation\">}</span>\n\n<span class=\"gatsby-highlight-code-line\"><span class=\"token keyword\">export</span> type PublicPatient <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">,</span> <span class=\"token string\">'ssn'</span> <span class=\"token operator\">|</span> <span class=\"token string\">'entries'</span> <span class=\"token operator\">></span></span></code></pre></div>\n<p>Response should look as follows:</p>\n<picture><img src=\"/static/ad0b2c4fbc560a07305bb3de1d56578c/5a190/38a.png\" srcset=\"/static/ad0b2c4fbc560a07305bb3de1d56578c/772e8/38a.png 200w,\n/static/ad0b2c4fbc560a07305bb3de1d56578c/e17e5/38a.png 400w,\n/static/ad0b2c4fbc560a07305bb3de1d56578c/5a190/38a.png 800w,\n/static/ad0b2c4fbc560a07305bb3de1d56578c/c1b63/38a.png 1200w,\n/static/ad0b2c4fbc560a07305bb3de1d56578c/ad00e/38a.png 1366w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>9.17: patientor, step2</h4>\n<p>Create a page for showing a patient's full information in the frontend. </p>\n<p>User should be able to access a patient's information e.g. by clicking the patient's name.</p>\n<p>Fetch the data from the endpoint created in the previous exercise. After fetching the patient information from the backend, add the fetched information to the application's state. Do not fetch the information if it already is in the app state, i.e. if the user is visiting the same patient's information many times. </p>\n<p>Since we now have the state in the context, you'll need to define a new action type for updating an individual patient's data.</p>\n<p>The Application uses <a href=\"https://react.semantic-ui.com/\">Semantic UI React</a> for styling, which is quite similar to <a href=\"https://react-bootstrap.github.io/\">React Bootstrap</a> and <a href=\"https://material-ui.com/\">MaterialUI</a> that we covered in <a href=\"/en/part7/more_about_styles\">part 7</a>. You may also use it for the new components but that is up to you since our main focus now is TypeScript.</p>\n<p>The Application also uses <a href=\"https://reacttraining.com/react-router/web/guides/quick-start\">react router</a>\nto control which view is visible in the frontend. You might want to have a look at <a href=\"/en/part7/react_router\">part 7</a> if you don't yet have a grasp on how the router works.</p>\n<p>The result could look like this:</p>\n<picture><img src=\"/static/56aa899fe44bc11ec3a3235ac9007834/5a190/39a.png\" srcset=\"/static/56aa899fe44bc11ec3a3235ac9007834/772e8/39a.png 200w,\n/static/56aa899fe44bc11ec3a3235ac9007834/e17e5/39a.png 400w,\n/static/56aa899fe44bc11ec3a3235ac9007834/5a190/39a.png 800w,\n/static/56aa899fe44bc11ec3a3235ac9007834/c1b63/39a.png 1200w,\n/static/56aa899fe44bc11ec3a3235ac9007834/b79a5/39a.png 1372w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The gender is shown with react-semantic-ui component <a href=\"https://react.semantic-ui.com/elements/icon/#gendersicons-can-represent-genders-or-types-of-sexuality\">Icon</a> </p>\n<p><strong>Note</strong> that in order to access the id in the url, you need to give <a href=\"https://reacttraining.com/react-router/web/api/Hooks/useparams\">useParams</a> a proper type argument:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> id <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> useParams<span class=\"token operator\">&lt;</span><span class=\"token punctuation\">{</span> id<span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4>9.18: patientor, step3</h4>\n<p>Currently we create <i>action</i> objects wherever we dispatch actions, e.g. the <i>App</i> component has the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"SET_PATIENT_LIST\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> patientListFromApi\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Define <a href=\"/en/part6/flux_architecture_and_redux#action-creators\">action creator functions</a> in the file <code class=\"language-text\">src/state/reducer.tsx</code> and refactor the code to use them.</p>\n<p>For example the <i>App</i> should become like the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">import</span> <span class=\"token punctuation\">{</span> useStateValue<span class=\"token punctuation\">,</span> setPatientList <span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">\"./state\"</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ...</span>\n\n<span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token function\">setPatientList</span><span class=\"token punctuation\">(</span>patientListFromApi<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"content\">\n<h3>Full entries</h3>\n<p>In the <a href=\"/en/part9/typing_the_express_app#exercises-9-10-9-11\">exercise 9.10.</a> we implemented an endpoint for fetching information about various diagnoses, but we are still not using that endpoint at all.\nSince we now have a page for viewing a patient's information, it would be nice to expand our data a bit.\nLet's add an <i>Entry</i> field to our patient data so that a patient's data contains their medical entries, including possible diagnoses.</p>\n<p>Let's ditch our old patient seed data from the backend and start using <a href=\"https://github.com/fullstack-hy/misc/blob/master/patients.ts\">this expanded format</a>.</p>\n<p><strong>Notice:</strong> This time the data is not in .json format but instead in the .ts-format. You should already have the complete <i>Gender</i> and <i>Patient</i> types implemented so only correct the paths where they are imported from if needed.</p>\n<p>Let us now create a proper <i>Entry</i> type based on the data we have.</p>\n<p>If we take a closer look at the data, we can see that the entries are actually quite different from one another. For example, let's take a look at the first two entries:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'d811e46d-70b3-4d90-b090-4535c7cf8fb1'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">'2015-01-02'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'Hospital'</span><span class=\"token punctuation\">,</span>\n  specialist<span class=\"token operator\">:</span> <span class=\"token string\">'MD House'</span><span class=\"token punctuation\">,</span>\n  diagnosisCodes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'S62.5'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span>\n    <span class=\"token string\">\"Healing time appr. 2 weeks. patient doesn't remember how he got the injury.\"</span><span class=\"token punctuation\">,</span>\n  discharge<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    date<span class=\"token operator\">:</span> <span class=\"token string\">'2015-01-16'</span><span class=\"token punctuation\">,</span>\n    criteria<span class=\"token operator\">:</span> <span class=\"token string\">'Thumb has healed.'</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token operator\">...</span>\n<span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> <span class=\"token string\">'fcd59fa6-c4b4-4fec-ac4d-df4fe1f85f62'</span><span class=\"token punctuation\">,</span>\n  date<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-05'</span><span class=\"token punctuation\">,</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">'OccupationalHealthcare'</span><span class=\"token punctuation\">,</span>\n  specialist<span class=\"token operator\">:</span> <span class=\"token string\">'MD House'</span><span class=\"token punctuation\">,</span>\n  employerName<span class=\"token operator\">:</span> <span class=\"token string\">'HyPD'</span><span class=\"token punctuation\">,</span>\n  diagnosisCodes<span class=\"token operator\">:</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'Z57.1'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'Z74.3'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'M51.2'</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n  description<span class=\"token operator\">:</span>\n    <span class=\"token string\">'Patient mistakenly found himself in a nuclear plant waste site without protection gear. Very minor radiation poisoning. '</span><span class=\"token punctuation\">,</span>\n  sickLeave<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n    startDate<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-05'</span><span class=\"token punctuation\">,</span>\n    endDate<span class=\"token operator\">:</span> <span class=\"token string\">'2019-08-28'</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Immediately we can see that while the first few fields are the same, the first entry has a <i>discharge</i> field and the second entry has <i>employerName</i> and <i>sickLeave</i> fields.\nAll the entries seem to have some fields in common, but some fields are entry specific. </p>\n<p>When looking at the <i>type</i>, we can see that there are actually three kinds of entries: <i>OccupationalHealthcare</i>, <i>Hospital</i> and <i>HealthCheck</i>.\nThis indicates we need three separate types. Since they all have some fields in common, we might just want to create a base entry interface that we can extend with the different fields in each type. </p>\n<p>When looking at the data, it seems that the fields <i>id</i>, <i>description</i>, <i>date</i> and <i>specialist</i> are something that can be found from each entry. On top of that, it seems that the <i>diagnosisCodes</i> is only found in one <i>OccupationalHealthCare</i> and one <i>Hospital</i> type entry. Since it is not always used even in those types of entries, it is safe to assume that the field is optional. We could consider adding it to the <i>HealthCheck</i> type as well,\nsince it might just not be used in these specific entries.</p>\n<p>So our <i>BaseEntry</i> from which each type could be extended from would be the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  specialist<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  diagnosisCodes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> string<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>If we want to finetune it a bit further, since we already have a <i>Diagnosis</i> type defined in the backend, we might just want to refer to the code field of the <i>Diagnosis</i> type directly in case its type ever changes.\nWe can do that like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  id<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  description<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  date<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  specialist<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  diagnosisCodes<span class=\"token operator\">?</span><span class=\"token operator\">:</span> Array<span class=\"token operator\">&lt;</span>Diagnosis<span class=\"token punctuation\">[</span><span class=\"token string\">'code'</span><span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you might remember <i>Array&#x3C;Type></i> is just an alternative way to say <i>Type[]</i>. In cases like this it is just much more clear to use the array convention since the other option would be to define the type by saying <i>Diagnosis['code'][]</i> which starts to look a bit strange.</p>\n<p>Now that we have the <i>BaseEntry</i> defined, we can start creating the extended entry types we will actually be using. Let's start by creating the <i>HealthCheckEntry</i> type.</p>\n<p>Entries of type <i>HealthCheck</i> contain the field <i>HealthCheckRating</i>, which is an integer from 0 to 3, zero meaning <i>Healthy</i> and 3 meaning <i>CriticalRisk</i>. This is a perfect case for an enum definition.\nWith these specifications we could write a <i>HealthCheckEntry</i> type definition like so:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">enum</span> HealthCheckRating <span class=\"token punctuation\">{</span>\n  <span class=\"token string\">\"Healthy\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"LowRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"HighRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span>\n  <span class=\"token string\">\"CriticalRisk\"</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">interface</span> <span class=\"token class-name\">HealthCheckEntry</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">BaseEntry</span> <span class=\"token punctuation\">{</span>\n  type<span class=\"token operator\">:</span> <span class=\"token string\">\"HealthCheck\"</span><span class=\"token punctuation\">;</span>\n  healthCheckRating<span class=\"token operator\">:</span> HealthCheckRating<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now we only need to create the <i>OccupationalHealthCareEntry</i> and <i>HospitalEntry</i> types so we can combine them in an union and export them as an Entry type like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type Entry <span class=\"token operator\">=</span>\n  <span class=\"token operator\">|</span> HospitalEntry\n  <span class=\"token operator\">|</span> OccupationalHealthcareEntry\n  <span class=\"token operator\">|</span> HealthCheckEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>An important point concerning unions is that, when you use them with <code class=\"language-text\">Omit</code> to exclude a property, it works in a possibly unexpected way. Suppose we want to remove the <code class=\"language-text\">id</code> from each <code class=\"language-text\">Entry</code>, we could think of using <code class=\"language-text\">Omit&lt;Entry, &#39;id&#39;&gt;</code>, but <a href=\"https://github.com/microsoft/TypeScript/issues/42680\">it wouldn't work as we might expect</a>. In fact, the resulting type, would only contain the common properties, but not the ones they don't share. A possible workaround is to define a special Omit-like function to deal with such situations:</p>\n<div class=\"gatsby-highlight\" data-language=\"ts\"><pre class=\"language-ts\"><code class=\"language-ts\"><span class=\"token comment\">// Define special omit for unions</span>\n<span class=\"token keyword\">type</span> UnionOmit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">string</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">number</span> <span class=\"token operator\">|</span> <span class=\"token builtin\">symbol</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token constant\">T</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">unknown</span> <span class=\"token operator\">?</span> Omit<span class=\"token operator\">&lt;</span><span class=\"token constant\">T</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">K</span><span class=\"token operator\">></span> <span class=\"token operator\">:</span> <span class=\"token builtin\">never</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// Define Entry without the 'id' property</span>\n<span class=\"token keyword\">type</span> EntryWithoutId <span class=\"token operator\">=</span> UnionOmit<span class=\"token operator\">&lt;</span>Entry<span class=\"token punctuation\">,</span> <span class=\"token string\">'id'</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.19.-9.22.</h3>\n<h4>9.19: patientor, step4</h4>\n<p>Define the types <i>OccupationalHealthCareEntry</i> and <i>HospitalEntry</i> so that those conform with the example data. Ensure that your backend returns the entries properly when you go to a individual patient's route</p>\n<picture><img src=\"/static/21b5816433d1a5aeaf15bdac4f528d77/5a190/40.png\" srcset=\"/static/21b5816433d1a5aeaf15bdac4f528d77/772e8/40.png 200w,\n/static/21b5816433d1a5aeaf15bdac4f528d77/e17e5/40.png 400w,\n/static/21b5816433d1a5aeaf15bdac4f528d77/5a190/40.png 800w,\n/static/21b5816433d1a5aeaf15bdac4f528d77/c1b63/40.png 1200w,\n/static/21b5816433d1a5aeaf15bdac4f528d77/29007/40.png 1600w,\n/static/21b5816433d1a5aeaf15bdac4f528d77/ddf4f/40.png 1624w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Use types properly in the backend! For now there is no need to do a proper validation for all the fields of the entries in the backend, it is enough e.g. to check that the field <i>type</i> has a correct value.</p>\n<h4>9.20: patientor, step5</h4>\n<p>Extend a patient's page in the frontend to list the <i>date</i>, <i>description</i> and <i>diagnose codes</i> of the patient's entries. </p>\n<p>You can use the same type definition for an <i>Entry</i> in the frontend. For these exercises it is enough just to copy/paste the definitions from the backend to the frontend.</p>\n<p>Your solution could look like this:</p>\n<picture><img src=\"/static/bc5d529ae2163ff75b844c5c014ad074/5a190/41.png\" srcset=\"/static/bc5d529ae2163ff75b844c5c014ad074/772e8/41.png 200w,\n/static/bc5d529ae2163ff75b844c5c014ad074/e17e5/41.png 400w,\n/static/bc5d529ae2163ff75b844c5c014ad074/5a190/41.png 800w,\n/static/bc5d529ae2163ff75b844c5c014ad074/c1b63/41.png 1200w,\n/static/bc5d529ae2163ff75b844c5c014ad074/29007/41.png 1600w,\n/static/bc5d529ae2163ff75b844c5c014ad074/5ba90/41.png 1604w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>9.21: patientor, step6</h4>\n<p>Fetch and add diagnoses to application state from <i>/api/diagnosis</i> endpoint. Use the new diagnosis data to show the descriptions for patient's diagnosis codes:</p>\n<picture><img src=\"/static/6d08345c7fd0b3141e9de139f3ec87b0/5a190/42.png\" srcset=\"/static/6d08345c7fd0b3141e9de139f3ec87b0/772e8/42.png 200w,\n/static/6d08345c7fd0b3141e9de139f3ec87b0/e17e5/42.png 400w,\n/static/6d08345c7fd0b3141e9de139f3ec87b0/5a190/42.png 800w,\n/static/6d08345c7fd0b3141e9de139f3ec87b0/c1b63/42.png 1200w,\n/static/6d08345c7fd0b3141e9de139f3ec87b0/29007/42.png 1600w,\n/static/6d08345c7fd0b3141e9de139f3ec87b0/807a0/42.png 1652w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>9.22: patientor, step7</h4>\n<p>Extend the entry-listing in the patient page to include the Entry's details with a new component that shows rest of the information of the patients entries distinguishing different types from each other. </p>\n<p>You could use eg. <a href=\"https://react.semantic-ui.com/elements/icon/\">Icon</a> or some other <a href=\"https://react.semantic-ui.com/\">SemanticUI</a> component to get appropriate visuals for your listing.</p>\n<p>You should use a <em>switch case</em> based rendering and <i>exhaustive type checking</i> so that no cases can be forgotten. </p>\n<p>Like this:</p>\n<picture><img src=\"/static/97edaf23398bcd60caf2b0338f9f8135/5a190/35c.png\" srcset=\"/static/97edaf23398bcd60caf2b0338f9f8135/772e8/35c.png 200w,\n/static/97edaf23398bcd60caf2b0338f9f8135/e17e5/35c.png 400w,\n/static/97edaf23398bcd60caf2b0338f9f8135/5a190/35c.png 800w,\n/static/97edaf23398bcd60caf2b0338f9f8135/c1b63/35c.png 1200w,\n/static/97edaf23398bcd60caf2b0338f9f8135/1acf3/35c.png 1596w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>The resulting entries in the listing <i>could</i> look something like this:</p>\n<picture><img src=\"/static/6c81f869cc8bee05bdbdb588fbec1ddb/5a190/36a.png\" srcset=\"/static/6c81f869cc8bee05bdbdb588fbec1ddb/772e8/36a.png 200w,\n/static/6c81f869cc8bee05bdbdb588fbec1ddb/e17e5/36a.png 400w,\n/static/6c81f869cc8bee05bdbdb588fbec1ddb/5a190/36a.png 800w,\n/static/6c81f869cc8bee05bdbdb588fbec1ddb/c1b63/36a.png 1200w,\n/static/6c81f869cc8bee05bdbdb588fbec1ddb/29007/36a.png 1600w,\n/static/6c81f869cc8bee05bdbdb588fbec1ddb/6f175/36a.png 2036w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n</div>\n<div class=\"content\">\n<h3>Add patient form</h3>\n<p>Form handling can sometimes be quite a nuisance in React. That's why we have decided to utilize the the <a href=\"https://jaredpalmer.com/formik/docs/overview\">Formik</a> package for our add patient form in our app. Here's a small intro from the Formiks's documentation:</p>\n<blockquote>\n<p>Formik is a small library that helps you with the 3 most annoying parts:</p>\n<ul>\n<li>Getting values in and out of form state</li>\n<li>Validation and error messages</li>\n<li>Handling form submission</li>\n</ul>\n<p>By colocating all of the above in one place, Formik will keep things organized - making testing, refactoring, and reasoning about your forms a breeze.</p>\n</blockquote>\n<p>The code for the form can be found from <i>src/AddPatientModal/AddPatientForm.tsx</i> and some form field helpers can be found from <i>src/AddPatientModal/FormField.tsx</i>.</p>\n<p>Looking at the top of the <i>AddPatientForm.tsx</i> you can see we have created a type for our form values, called simply <i>PatientFormValues</i>. The type is a modified version of the <i>Patient</i> type, with the <i>id</i> and <i>entries</i> properties omitted. We don't want the user to be able to submit those when creating a new patient. The <i>id</i> is created by the backend and <i>entries</i> can only be added for existing patients.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type PatientFormValues <span class=\"token operator\">=</span> Omit<span class=\"token operator\">&lt;</span>Patient<span class=\"token punctuation\">,</span> <span class=\"token string\">\"id\"</span> <span class=\"token operator\">|</span> <span class=\"token string\">\"entries\"</span><span class=\"token operator\">></span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next we declare the props for our form component:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> PatientFormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>As you can see, the component requires two props: <i>onSubmit</i> and <i>onCancel</i>.\nBoth are callback functions that return <i>void</i>. The <i>onSubmit</i> function should receive an\nobject of type <i>PatientFormValues</i> as an argument, so that the callback can handle our form values.</p>\n<p>Looking at the <i>AddPatientForm</i> function component, you can see we have bound the <i>Props</i> as our component's props, and we destructure <i>onSubmit</i> and <i>onCancel</i> from those props.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AddPatientForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> onCancel <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now before we continue, let's take a look at our form helpers in <i>FormField.tsx</i>.\nIf you check what is exported from the file, you'll find the type <i>GenderOption</i> and the function components <i>SelectField</i> and <i>TextField</i>.</p>\n<p>Let's take a closer look at <i>SelectField</i> and the types around it.\nFirst we create a generic type for each option object, that contains a value and a label for that value. These are the kind of option objects we want to allow on our form in the select field.\nSince the only options we want to allow are different genders, we set that the <i>value</i> should be of type <i>Gender</i>.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">export</span> type GenderOption <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  value<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">;</span>\n  label<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In <i>AddPatientForm.tsx</i> we use the <i>GenderOption</i> type for the <i>genderOptions</i> variable, declaring it to be an array containing objects of type <i>GenderOption</i>:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> genderOptions<span class=\"token operator\">:</span> GenderOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">.</span>Male<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Male\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">.</span>Female<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Female\"</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">{</span> value<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">.</span>Other<span class=\"token punctuation\">,</span> label<span class=\"token operator\">:</span> <span class=\"token string\">\"Other\"</span> <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Next look at the type <i>SelectFieldProps</i>. It defines the type for the props for our <i>SelectField</i> component. There you can see that options is an array of <i>GenderOption</i> types.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">type SelectFieldProps <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  name<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  label<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  options<span class=\"token operator\">:</span> GenderOption<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>The function component <i>SelectField</i> in itself is pretty straight forward. It renders the label, a select element, and all given option elements (or actually their labels and values).</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">SelectField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span>\n  name<span class=\"token punctuation\">,</span>\n  label<span class=\"token punctuation\">,</span>\n  options\n<span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> SelectFieldProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Field</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span> <span class=\"token attr-name\">as</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>select<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ui dropdown<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span>options<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">option</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n        <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>option</span> <span class=\"token attr-name\">key</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">value</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token punctuation\">{</span>option<span class=\"token punctuation\">.</span>label <span class=\"token operator\">||</span> option<span class=\"token punctuation\">.</span>value<span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n        </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>option</span><span class=\"token punctuation\">></span></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Field</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Field</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now let's move on to the <i>TextField</i> component.\nThe component renders a SemanticUI <a href=\"https://react.semantic-ui.com/collections/form/\">Form.Field</a> with a label and a Formik <a href=\"https://jaredpalmer.com/formik/docs/api/field\">Field</a>.\nThe Formik Field receives a <i>name</i> and a <i>placeholder</i> as props.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">TextProps</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">FieldProps</span> <span class=\"token punctuation\">{</span>\n  label<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n  placeholder<span class=\"token operator\">:</span> string<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TextField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> field<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> placeholder <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TextProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span>\n  <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form.Field</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">{</span>label<span class=\"token punctuation\">}</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>label</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span> <span class=\"token attr-name\">placeholder</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>placeholder<span class=\"token punctuation\">}</span></span> <span class=\"token spread\"><span class=\"token punctuation\">{</span><span class=\"token punctuation\">...</span><span class=\"token attr-value\">field</span><span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span>div</span> <span class=\"token attr-name\">style</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span> color<span class=\"token operator\">:</span><span class=\"token string\">'red'</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">ErrorMessage</span></span> <span class=\"token attr-name\">name</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>field<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">}</span></span> <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span>div</span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form.Field</span></span><span class=\"token punctuation\">></span></span>\n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Note, that we use the Formik <a href=\"https://jaredpalmer.com/formik/docs/api/errormessage\">ErrorMessage</a> component to render an error message for the input when needed.\nThe component does everything under the hood, and we don't need to specify what it should do.</p>\n<p>It would also be possible to get hold of the error messages within the component by using the prop <i>form</i>: </p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">TextField</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> field<span class=\"token punctuation\">,</span> label<span class=\"token punctuation\">,</span> placeholder<span class=\"token punctuation\">,</span> form <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> TextProps</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span>form<span class=\"token punctuation\">.</span>errors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Now, back to the  actual form component in <i>AddPatientForm.tsx</i>.\nThe function component <i>AddPatientForm</i> renders a <a href=\"https://jaredpalmer.com/formik/docs/api/formik\">Formik component</a>. The Formik component is a wrapper, which requires two props: <i>initialValues</i> and <i>onSubmit</i>. The function of the props is quite self explanatory.\nThe Formik wrapper keeps a track of your form's state, and then exposes it and a few resuable methods and event handlers to your form via props.</p>\n<p>We are also using an optional <i>validate</i> prop, that expects a validation function and returns an object containing possible errors. Here we only check that our text fields are not falsy, but it could easily contain e.g. some validation for the social security number format or something like that. The error messages defined by this function can then be displayed on the corresponding field's ErrorMessage component. </p>\n<p>First have a look at the entire component. We will later discuss the different parts in detail.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token keyword\">interface</span> <span class=\"token class-name\">Props</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function-variable function\">onSubmit</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> PatientFormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function-variable function\">onCancel</span><span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">void</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AddPatientForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> onCancel <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Formik</span></span>\n      <span class=\"token attr-name\">initialValues</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n        name<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        ssn<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        dateOfBirth<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        occupation<span class=\"token operator\">:</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span>\n        gender<span class=\"token operator\">:</span> Gender<span class=\"token punctuation\">.</span>Other\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">onSubmit</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span></span>\n      <span class=\"token attr-name\">validate</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">values</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> requiredError <span class=\"token operator\">=</span> <span class=\"token string\">\"Field is required\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> errors<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">[</span>field<span class=\"token operator\">:</span> string<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span> string <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          errors<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> requiredError<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span>ssn<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          errors<span class=\"token punctuation\">.</span>ssn <span class=\"token operator\">=</span> requiredError<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span>dateOfBirth<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          errors<span class=\"token punctuation\">.</span>dateOfBirth <span class=\"token operator\">=</span> requiredError<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>values<span class=\"token punctuation\">.</span>occupation<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          errors<span class=\"token punctuation\">.</span>occupation <span class=\"token operator\">=</span> requiredError<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> errors<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span></span>\n    <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      </span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isValid<span class=\"token punctuation\">,</span> dirty <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n          <span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Form</span></span> <span class=\"token attr-name\">className</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>form ui<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span>\n              <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Name<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>name<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>TextField<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span>\n              <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Social Security Number<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>SSN<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>ssn<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>TextField<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span>\n              <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Date Of Birth<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>YYYY-MM-DD<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>dateOfBirth<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>TextField<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Field</span></span>\n              <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Occupation<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">placeholder</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Occupation<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>occupation<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">component</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>TextField<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">SelectField</span></span>\n              <span class=\"token attr-name\">label</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>Gender<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">name</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>gender<span class=\"token punctuation\">\"</span></span>\n              <span class=\"token attr-name\">options</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>genderOptions<span class=\"token punctuation\">}</span></span>\n            <span class=\"token punctuation\">/></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid.Column</span></span> <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCancel<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  Cancel\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid.Column</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid.Column</span></span> <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span>\n                  <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span>\n                  <span class=\"token attr-name\">disabled</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token operator\">!</span>dirty <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>isValid<span class=\"token punctuation\">}</span></span>\n                <span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n                  Add\n                </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n              </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid.Column</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n            </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n          </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Form</span></span><span class=\"token punctuation\">></span></span>\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Formik</span></span><span class=\"token punctuation\">></span></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">export</span> <span class=\"token keyword\">default</span> AddPatientForm<span class=\"token punctuation\">;</span></code></pre></div>\n<p>As a child of our Formik wrapper, we have a <i>function</i> which returns the form contents.\nWe use Formik's <a href=\"https://jaredpalmer.com/formik/docs/api/form\">Form</a> to render the actual form element. Inside of the Form element we use our <i>TextField</i> and <i>SelectField</i> components, that we created in <i>FormField.tsx</i>.</p>\n<p>Lastly we create two buttons: one for cancelling the form submission and one for submitting the form.\nThe cancel button calls the <i>onCancel</i> callback straight away when clicked.\nThe submit button triggers Formik's onSubmit event, which in turn uses the <i>onSubmit</i> callback from the component's props. The submit button is enabled only if the form is <i>valid</i> and <i>dirty</i>, which means that user has edited some of the fields.</p>\n<p>We handle form submission through Formik, because it allows us to call the validation function before\nperforming the actual submission. If the validation function returns any errors, the submission is cancelled.</p>\n<p>The buttons are set inside a SemanticUI <a href=\"https://react.semantic-ui.com/collections/grid/\">Grid</a> to set them next to each other easily.</p>\n<div class=\"gatsby-highlight\" data-language=\"jsx\"><pre class=\"language-jsx\"><code class=\"language-jsx\"><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid.Column</span></span> <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>left<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>button<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">onClick</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span>onCancel<span class=\"token punctuation\">}</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>red<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Cancel\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid.Column</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Grid.Column</span></span> <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">width</span><span class=\"token script language-javascript\"><span class=\"token script-punctuation punctuation\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">5</span><span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;</span><span class=\"token class-name\">Button</span></span> <span class=\"token attr-name\">type</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>submit<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">floated</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>right<span class=\"token punctuation\">\"</span></span> <span class=\"token attr-name\">color</span><span class=\"token attr-value\"><span class=\"token punctuation\">=</span><span class=\"token punctuation\">\"</span>green<span class=\"token punctuation\">\"</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n      Add\n    </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Button</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n  </span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid.Column</span></span><span class=\"token punctuation\">></span></span><span class=\"token plain-text\">\n</span><span class=\"token tag\"><span class=\"token tag\"><span class=\"token punctuation\">&lt;/</span><span class=\"token class-name\">Grid</span></span><span class=\"token punctuation\">></span></span></code></pre></div>\n<p>The <i>onSubmit</i> callback has been passed down all the way from our patient list page.\nBasically it sends a HTTP POST request to our backend, adds the patient returned from the backend to our app's state and closes the modal.\nIf the backend returns an error, the error is displayed on the form.</p>\n<p>Here is our submit function:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">submitNewPatient</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">async</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">values<span class=\"token operator\">:</span> FormValues</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> data<span class=\"token operator\">:</span> newPatient <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> axios<span class=\"token punctuation\">.</span>post<span class=\"token operator\">&lt;</span>Patient<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>\n      <span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>apiBaseUrl<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\">/patients</span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">,</span>\n      values\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dispatch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span> type<span class=\"token operator\">:</span> <span class=\"token string\">\"ADD_PATIENT\"</span><span class=\"token punctuation\">,</span> payload<span class=\"token operator\">:</span> newPatient <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">closeModal</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>error<span class=\"token operator\">:</span> unknown<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> errorMessage <span class=\"token operator\">=</span> <span class=\"token string\">'Something went wrong.'</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>axios<span class=\"token punctuation\">.</span><span class=\"token function\">isAxiosError</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      console<span class=\"token punctuation\">.</span><span class=\"token function\">error</span><span class=\"token punctuation\">(</span>error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      errorMessage <span class=\"token operator\">=</span> error<span class=\"token punctuation\">.</span>response<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>error<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">setError</span><span class=\"token punctuation\">(</span>errorMessage<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>With this material you should be able to complete the rest of this part's exercises. When in doubt, try reading the existing code to find clues on how to proceed!</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 9.23.-9.27.</h3>\n<h4>9.23: patientor, step8</h4>\n<p>We have established that patients can have different kinds of entries. We don't yet have any way of adding entries to patients in our app, so at the moment it is pretty useless as an electronic medical record.</p>\n<p>Your next task is to add an endpoint <i>/api/patients/:id/entries</i> to your backend, through which you can POST an entry for a patient. </p>\n<p>Remember that we have different kinds of entries in our app, so our backend should support all those types and check that at least all required fields are given for each type.</p>\n<h4>9.24: patientor, step9</h4>\n<p>Now that our backend supports adding entries, we want to add the corresponding functionality to the frontend. In this exercise you should add a form for adding an entry to a patient. An intuitive place for accessing the form would be on a patient's page. </p>\n<p>In this exercise it is enough to <strong>support <i>one</i> entry type</strong>, and you do not have to handle any errors. It is enough if a new entry can be created when the form is filled with valid data.</p>\n<p>Upon a successful submit the new entry should be added to the correct patient and the patient's entries on the patient page should be updated to contain the new entry.</p>\n<p>If you like, you can re-use some of the code from the <i>Add patient</i> form for this exercise, but this is not a requirement.</p>\n<p>Note that the file <a href=\"https://github.com/fullstack-hy/patientor/blob/master/src/AddPatientModal/FormField.tsx#L58\">FormField.tsx</a> has a ready made component <em>DiagnosisSelection</em> that can be used for setting the field <i>diagnoses</i>.</p>\n<p>It can be used as follows:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">const</span> <span class=\"token function-variable function\">AddEntryForm</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> onSubmit<span class=\"token punctuation\">,</span> onCancel <span class=\"token punctuation\">}</span><span class=\"token operator\">:</span> Props</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n<span class=\"gatsby-highlight-code-line\">  <span class=\"token keyword\">const</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">{</span> diagnoses <span class=\"token punctuation\">}</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">useStateValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n    <span class=\"token operator\">&lt;</span>Formik\n    initialValues<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n    onSubmit<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>onSubmit<span class=\"token punctuation\">}</span>\n    validate<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token parameter\">values</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">/// ...</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">></span>\n<span class=\"gatsby-highlight-code-line\">    <span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\"><span class=\"token punctuation\">{</span> isValid<span class=\"token punctuation\">,</span> dirty<span class=\"token punctuation\">,</span> setFieldValue<span class=\"token punctuation\">,</span> setFieldTouched <span class=\"token punctuation\">}</span></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span></span>\n      <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n        <span class=\"token operator\">&lt;</span>Form className<span class=\"token operator\">=</span><span class=\"token string\">\"form ui\"</span><span class=\"token operator\">></span>\n          <span class=\"token comment\">// ...</span>\n\n<span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">&lt;</span>DiagnosisSelection</span><span class=\"gatsby-highlight-code-line\">            setFieldValue<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setFieldValue<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            setFieldTouched<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>setFieldTouched<span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">            diagnoses<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>Object<span class=\"token punctuation\">.</span><span class=\"token function\">values</span><span class=\"token punctuation\">(</span>diagnoses<span class=\"token punctuation\">)</span><span class=\"token punctuation\">}</span></span><span class=\"gatsby-highlight-code-line\">          <span class=\"token operator\">/</span><span class=\"token operator\">></span>    </span>\n          <span class=\"token comment\">// ...</span>\n        <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Form<span class=\"token operator\">></span>\n      <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n  <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>Formik<span class=\"token operator\">></span>\n  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>There is also ready-made component <em>NumberField</em> for the numeric values with a limited range</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">&lt;</span>Field\n  label<span class=\"token operator\">=</span><span class=\"token string\">\"healthCheckRating\"</span>\n  name<span class=\"token operator\">=</span><span class=\"token string\">\"healthCheckRating\"</span>\n  component<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>NumberField<span class=\"token punctuation\">}</span>\n  min<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span>\n  max<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">}</span>\n<span class=\"token operator\">/</span><span class=\"token operator\">></span></code></pre></div>\n<h4>9.25: patientor, step10</h4>\n<p>Extend your solution so that it displays an error message if some required values are missing or formatted incorrectly. </p>\n<h4>9.26: patientor, step11</h4>\n<p>Extend your solution so that it supports <i>two</i> entry types and displays an error message if some required values are missing or formatted incorrectly. You do not need to care about the possible errors in the server's response.</p>\n<p>The easiest but surely not the most elegant way to do this exercise is to have a separate form for each different entry type. Getting the types to work properly might be a slight challenge if you use just a single form.</p>\n<h4>9.27: patientor, step12</h4>\n<p>Extend your solution so that it supports <i>all the entry types</i> and displays an error message if some required values are missing or formatted incorrectly. You do not need to care about the possible errors in the server's response.</p>\n<h3>Submitting exercises and getting the credits</h3>\n<p>Exercises of this part are submitted via <a href=\"https://studies.cs.helsinki.fi/stats/courses/fs-typescript\">the submissions system</a> just like in the previous parts, but unlike previous parts, the submission goes to different \"course instance\". Remember that you have to finish at least 24 exercises to pass this part!</p>\n<p>Once you have completed the exercises and want to get the credits, let us know through the exercise submission system that you have completed the course:</p>\n<picture><img src=\"/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/5a190/21.png\" alt=\"Submissions\" srcset=\"/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/772e8/21.png 200w,\n/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/e17e5/21.png 400w,\n/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/5a190/21.png 800w,\n/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/c1b63/21.png 1200w,\n/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/29007/21.png 1600w,\n/static/d2a0d8c8142ce4113bdf5bfec2d1dd37/74e37/21.png 1732w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Note that the \"exam done in Moodle\" note refers to the <a href=\"/en/part0/general_info#sign-up-for-the-exam\">Full Stack Open course's exam</a>, which has to be completed before you can earn credits from this part.</p>\n<p><strong>Note</strong> that you need a registration to the corresponding course part for getting the credits registered, se <a href=\"/en/part0/general_info#parts-and-completion\">here</a> for more information.</p>\n<p>You can download the certificate for completing this part by clicking one of the flag icons. The flag icon corresponds to the certificate's language. </p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/ed8ae98c5d885b4d1928a681eefbe7c4/part-9.svg"},"part":9,"letter":"d","lang":"en"}}},"pageContext":{"part":9,"letter":"d","lang":"en"}}}