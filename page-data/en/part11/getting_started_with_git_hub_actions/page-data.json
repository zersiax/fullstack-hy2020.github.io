{"componentChunkName":"component---src-templates-content-template-js","path":"/en/part11/getting_started_with_git_hub_actions","result":{"data":{"markdownRemark":{"html":"<div class=\"content\">\n<p>Before we start playing with GitHub Actions, let's have a look at what they are and how do they work.</p>\n<p>GitHub Actions work on a basis of <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#workflows\">workflows</a>. A workflow is a series of <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#jobs\">jobs</a> that are run when a certain triggering <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#events\">event</a> happens. The jobs that are run then themselves contain instructions for what GitHub Actions should do.</p>\n<p>A typical execution of a workflow looks like this:</p>\n<ul>\n<li>Triggering event happens (for example, there is a push to the main branch).</li>\n<li>The workflow with that trigger is executed.</li>\n<li>Cleanup</li>\n</ul>\n<h3>Basic needs</h3>\n<p>In general, to have CI operate on a repository, we need a few things:</p>\n<ul>\n<li>A repository (obviously)</li>\n<li>Some definition of what the CI needs to do:\nThis can be in the form of a specific file inside the repository or it can be defined in the CI system</li>\n<li>The CI needs to be aware that the repository (and the file within it) exist</li>\n<li>The CI needs to be able to access the repository</li>\n<li>The CI needs permissions to perform the actions it is supposed to be able to do:\nFor example, if the CI needs to be able to deploy to a production environment, it needs <i>credentials</i> for that environment.</li>\n</ul>\n<p>That's the traditional model at least, we'll see in a minute how GitHub Actions short-circuit some of these steps or rather make it such that you don't have to worry about them!</p>\n<p>GitHub Actions have a great advantage over self-hosted solutions: the repository is hosted with the CI provider. In other words, Github provides both the repository and the CI platform. This means that if we've enabled actions for a repository, GitHub is already aware of the fact that we have workflows defined and what those definitions look like.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercise 11.2.</h3>\n<p>In most exercises of this part, we are building a CI/CD pipeline for a small project found in <a href=\"https://github.com/smartlyio/fullstackopen-cicd\">this example project repository</a>.</p>\n<p>Note that the code <i>might not work</i> with node version 15. If you happen to have that version, and the project does not even start, please downgrade to 14 or you are on your own. </p>\n<h4>11.2 The example project</h4>\n<p>The first thing you'll want to do is to fork the example repository under your name. What it essentially does is it creates a copy of the repository under your GitHub user profile for your use. </p>\n<p>To fork the repository, you can click on the Fork button in the top-right area of the repository view next to the Star button:</p>\n<picture><img src=\"/static/0cce3b0343fba882969b9af9848d4aa7/5a190/1.png\" srcset=\"/static/0cce3b0343fba882969b9af9848d4aa7/772e8/1.png 200w,\n/static/0cce3b0343fba882969b9af9848d4aa7/e17e5/1.png 400w,\n/static/0cce3b0343fba882969b9af9848d4aa7/5a190/1.png 800w,\n/static/0cce3b0343fba882969b9af9848d4aa7/c1b63/1.png 1200w,\n/static/0cce3b0343fba882969b9af9848d4aa7/29007/1.png 1600w,\n/static/0cce3b0343fba882969b9af9848d4aa7/a5262/1.png 2388w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Once you've clicked on the Fork button, GitHub will start the creation of a new repository called <code>{github_username}/full-stack-open-pokedex</code>.</p>\n<p>Once the process has been finished, you should be redirected to your brand new repository:</p>\n<picture><img src=\"/static/835dd48eadb3f508d615fc7a8eab8375/5a190/2.png\" srcset=\"/static/835dd48eadb3f508d615fc7a8eab8375/772e8/2.png 200w,\n/static/835dd48eadb3f508d615fc7a8eab8375/e17e5/2.png 400w,\n/static/835dd48eadb3f508d615fc7a8eab8375/5a190/2.png 800w,\n/static/835dd48eadb3f508d615fc7a8eab8375/c1b63/2.png 1200w,\n/static/835dd48eadb3f508d615fc7a8eab8375/29007/2.png 1600w,\n/static/835dd48eadb3f508d615fc7a8eab8375/d438d/2.png 2290w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>Clone the project now to your machine. As always, when starting with a new code, the most obvious place to look first is the file <code>package.json</code> </p>\n<p>Try now the following:</p>\n<ul>\n<li>install dependencies (by running <code>npm install</code>)</li>\n<li>start the code in development mode</li>\n<li>run tests</li>\n<li>lint the code </li>\n</ul>\n<p>You might notice that project contains some broken tests and linting errors. <strong>Just leave them as they are for now.</strong> We will get around those later in the exercises.</p>\n<p>As you might remember from <a href=\"/en/part3/deploying_app_to_internet#frontend-production-build\">part 3</a>, the React code <i>should not</i> be run in development mode once it is deployed in production. Try now the following</p>\n<ul>\n<li>create a production <i>build</i> of the project</li>\n<li>run the production version locally</li>\n</ul>\n<p>Also for these two tasks, there are ready-made npm scripts in the project!</p>\n<p>Study the structure of the project for a while. As you notice both the frontend and the backend code is now <a href=\"/en/part7/class_components_miscellaneous#frontend-and-backend-in-the-same-repository\">in the same repository</a>. In earlier parts of the course we had a separate repository for both, but having those in the same repository makes things much simpler when setting up a CI environment. </p>\n<p>In contrast to most projects in this course, the frontend code <i>does not use</i> create-react-app, but it has a relatively simple <a href=\"/en/part7/webpack\">webpack</a> configuration that takes care of creating the development environment and creating the production bundle.</p>\n</div>\n<div class=\"content\">\n<h3>Getting started with workflows</h3>\n<p>The core component of creating CI/CD pipelines with GitHub Actions is something called a <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#workflows\">Workflow</a>. Workflows are process flows that you can set up in your repository to run automated tasks such as building, testing, linting, releasing, and deploying to name a few! The hierarchy of a workflow looks as follows:</p>\n<p>Workflow</p>\n<ul>\n<li>\n<p>Job</p>\n<ul>\n<li>Step</li>\n<li>Step</li>\n</ul>\n</li>\n<li>\n<p>Job</p>\n<ul>\n<li>Step</li>\n</ul>\n</li>\n</ul>\n<p>Each workflow must specify at least one <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#jobs\">Job</a>, which contains a set of <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/introduction-to-github-actions#steps\">Steps</a> to perform individual tasks. The jobs will be run in parallel and the steps in each job will be executed sequentially. </p>\n<p>Steps can vary from running a custom command to using pre-defined actions, thus the name GitHub Actions. You can create <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/creating-actions\">customized actions</a> or use any actions published by the community, which are plenty, but let's get back to that later!</p>\n<p>For GitHub to recognize your workflows, they must be specified in <code>.github/workflows</code> folder in your repository. Each Workflow is its own separate file which needs to be configured using the <code>YAML</code> data-serialization language.</p>\n<p>YAML is a recursive acronym for \"YAML Ain't Markup Language\". As the name might hint its goal is to be human-readable and it is commonly used for configuration files. You will notice below that it is indeed very easy to understand!</p>\n<p>Notice that indentations are important in YAML. You can learn more about the syntax <a href=\"https://docs.ansible.com/ansible/latest/reference_appendices/YAMLSyntax.html\">here</a>.</p>\n<p>A basic workflow contains three elements in a YAML document. These three elements are:</p>\n<ul>\n<li>name: Yep, you guessed it, the name of the workflow</li>\n<li>(on) triggers: The events that trigger the workflow to be executed</li>\n<li>jobs: The separate jobs that the workflow will execute (a basic workflow might contain only one job).</li>\n</ul>\n<p>A simple workflow definition looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"yml\"><pre class=\"language-yml\"><code class=\"language-yml\"><span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Hello World<span class=\"token tag\">!</span>\n\n<span class=\"token key atrule\">on</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">push</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">branches</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> master\n\n<span class=\"token key atrule\">jobs</span><span class=\"token punctuation\">:</span>\n  <span class=\"token key atrule\">hello_world_job</span><span class=\"token punctuation\">:</span>\n    <span class=\"token key atrule\">runs-on</span><span class=\"token punctuation\">:</span> ubuntu<span class=\"token punctuation\">-</span><span class=\"token number\">18.04</span>\n    <span class=\"token key atrule\">steps</span><span class=\"token punctuation\">:</span>\n      <span class=\"token punctuation\">-</span> <span class=\"token key atrule\">name</span><span class=\"token punctuation\">:</span> Say hello\n        <span class=\"token key atrule\">run</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">|</span><span class=\"token scalar string\">\n          echo \"Hello World!\"</span></code></pre></div>\n<p>In this example, the trigger is a push to the main branch, which in our project is called <i>master</i>. (Your main branch could be called <i>main</i> or <i>master</i>).  There is one job named <i>hello_world_job</i>, it will be run in a virtual environment with Ubuntu 18.04. The job has just one step named \"Say hello\", which will run the <code>echo \"Hello World!\"</code> command in the shell.</p>\n<p>So you may ask, when does GitHub trigger a workflow to be started? There are plenty of <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\">options</a> to choose from, but generally speaking, you can configure a workflow to start once:</p>\n<ul>\n<li>An <i>event on GitHub</i> occurs such as when someone pushes a commit to a repository or when an issue or pull request is created</li>\n<li>A <i>scheduled event</i>, that is specified using the <a href=\"https://en.wikipedia.org/wiki/Cron\">cron</a>-syntax, happens</li>\n<li>An <i>external event</i> occurs, for example, a command is performed in an external application such as <a href=\"https://slack.com/\">Slack</a> messaging app</li>\n</ul>\n<p>To learn more about which events can be used to trigger workflows, please refer to GitHub Action's <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/events-that-trigger-workflows\">documentation</a>.</p>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 11.3-11.4.</h3>\n<p>To tie this all together, let us now get Github Actions up and running in the example project!</p>\n<h4>11.3 Hello world!</h4>\n<p>Create a new Workflow which outputs \"Hello World!\" to the user. For the setup, you should create the directory <code>.github/workflows</code> and a file <code>hello.yml</code> to your repository.</p>\n<p>To see what your GitHub Action workflow has done, you can navigate to the <strong>Actions</strong> tab in GitHub where you should see the workflows in your repository and the steps they implement. The output of your Hello World workflow should look something like this with a properly configured workflow.</p>\n<picture><img src=\"/static/fe8661ad89e5e09d1f4b764468b6e225/5a190/3.png\" alt=\"A properly configured Hello World workflow\" srcset=\"/static/fe8661ad89e5e09d1f4b764468b6e225/772e8/3.png 200w,\n/static/fe8661ad89e5e09d1f4b764468b6e225/e17e5/3.png 400w,\n/static/fe8661ad89e5e09d1f4b764468b6e225/5a190/3.png 800w,\n/static/fe8661ad89e5e09d1f4b764468b6e225/c1b63/3.png 1200w,\n/static/fe8661ad89e5e09d1f4b764468b6e225/29007/3.png 1600w,\n/static/fe8661ad89e5e09d1f4b764468b6e225/8078c/3.png 2218w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>You should see the \"Hello World!\" message as an output. If that's the case then you have successfully gone through all the necessary steps. You have your first GitHub Actions workflow active! </p>\n<p>Note that GitHub Actions also gives you information what is the exact environment (operating system, and it's <a href=\"https://github.com/actions/virtual-environments/blob/ubuntu18/20201129.1/images/linux/Ubuntu1804-README.md\">setup</a>) where your workflow is run. This is important since if something surprising happens, it makes debugging so much easier if you can reproduce all the steps in your machine!</p>\n<h4>11.4 Date and directory contents</h4>\n<p>Extend the workflow with steps that print the date and current directory content in long format. </p>\n<p>Both of these are easy steps, and just running commands <a href=\"https://man7.org/linux/man-pages/man1/date.1.html\">date</a> and <a href=\"https://man7.org/linux/man-pages/man1/ls.1.html\">ls</a> will do the trick.</p>\n<p>Your workflow should now look like this</p>\n<picture><img src=\"/static/f6a4370438bc44c4c89114e4685b8602/5a190/4.png\" alt=\"Date and dir content in workflow\" srcset=\"/static/f6a4370438bc44c4c89114e4685b8602/772e8/4.png 200w,\n/static/f6a4370438bc44c4c89114e4685b8602/e17e5/4.png 400w,\n/static/f6a4370438bc44c4c89114e4685b8602/5a190/4.png 800w,\n/static/f6a4370438bc44c4c89114e4685b8602/c1b63/4.png 1200w,\n/static/f6a4370438bc44c4c89114e4685b8602/29007/4.png 1600w,\n/static/f6a4370438bc44c4c89114e4685b8602/8170e/4.png 2132w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As the output of command <code>ls -l</code> shows, by default, the virtual environment that runs our workflow <i>does not</i> have any code!</p>\n</div>\n<div class=\"content\">\n<h3>Setting up lint, test and build steps</h3>\n<p>After completing the first exercises, you should have a simple but pretty useless workflow set up. Let's make our workflow do something useful.</p>\n<p>Let's implement a Github Action that will lint the code. If the checks don't pass, Github Actions will show a red status. </p>\n<p>At start, the workflow that we will save to file <code>pipeline.yml</code> looks like this:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">name<span class=\"token operator\">:</span> Deployment pipeline\n\non<span class=\"token operator\">:</span>\n  push<span class=\"token operator\">:</span>\n    branches<span class=\"token operator\">:</span>\n      <span class=\"token operator\">-</span> master\n\njobs<span class=\"token operator\">:</span></code></pre></div>\n<p>Before we can run a command to lint the code, we have to perform a couple of actions to set up the environment of the job.</p>\n<h4>Setting up the environment</h4>\n<p>Setting up the environment is an important task while configuring a pipeline. We're going to use an <code>ubuntu-18.04</code> virtual environment because this is the version of Ubuntu we're going to be running in production. </p>\n<p>It is important to replicate the same environment in CI as in production as closely as possible, to avoid situations where the same code works differently in CI and production, which would effectively defeat the purpose of using CI.</p>\n<p>Next, we list the steps in the \"build\" job that the CI would need to perform. As we noticed in the last exercise, by default the virtual environment does not have any code in it, so we need to <i>checkout the code</i> from the repository. </p>\n<p>This an easy step:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">name<span class=\"token operator\">:</span> Deployment pipeline\n\non<span class=\"token operator\">:</span>\n  push<span class=\"token operator\">:</span>\n    branches<span class=\"token operator\">:</span>\n      <span class=\"token operator\">-</span> master\n\njobs<span class=\"token operator\">:</span>\n<span class=\"gatsby-highlight-code-line\">  simple_deployment_pipeline<span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">    runs<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span> ubuntu<span class=\"token operator\">-</span><span class=\"token number\">18.04</span></span><span class=\"gatsby-highlight-code-line\">    steps<span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>checkout@v2</span></code></pre></div>\n<p>The <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepsuses\">uses</a> keyword tells the workflow to run a specific <i>action</i>. An action is a reusable piece of code, like a function. Actions can be defined in your repository in a separate file or you can use the ones available in public repositories. </p>\n<p>Here we're using a public action <a href=\"https://github.com/actions/checkout\">actions/checkout</a> and we specify a version (<code>@v2</code>) to avoid potential breaking changes if the action gets updated. The <code>checkout</code> action does what the name implies: it checkouts the project source code from git.</p>\n<p>Secondly, as the application is written in JavaSript, Node.js must be set up to be able to utilize the commands that are specified in <code>package.json</code>. To set up Node.js, <a href=\"https://github.com/actions/setup-node\">actions/setup-node</a> action can be used. Version <code>12.x</code> is selected because it is the version the application is using in the production environment.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"># name and trigger not shown anymore<span class=\"token operator\">...</span>\n\njobs<span class=\"token operator\">:</span>\n  simple_deployment_pipeline<span class=\"token operator\">:</span>\n    runs<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span> ubuntu<span class=\"token operator\">-</span><span class=\"token number\">18.04</span>\n    steps<span class=\"token operator\">:</span>\n      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>checkout@v2\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>setup<span class=\"token operator\">-</span>node@v1</span><span class=\"gatsby-highlight-code-line\">        <span class=\"token keyword\">with</span><span class=\"token operator\">:</span></span><span class=\"gatsby-highlight-code-line\">          node<span class=\"token operator\">-</span>version<span class=\"token operator\">:</span> <span class=\"token string\">'12.x'</span></span></code></pre></div>\n<p>As we can see, the <a href=\"https://docs.github.com/en/free-pro-team@latest/actions/reference/workflow-syntax-for-github-actions#jobsjob_idstepswith\">with</a> keyword is used to give a \"parameter\" to the action. Here the parameter specifies the version of Node.js we want to use.</p>\n<p>Lastly, the dependencies of the application must be installed. Just like on your own machine we execute <code>npm install</code>. The steps in the job should now look something like</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">jobs<span class=\"token operator\">:</span>\n  simple_deployment_pipeline<span class=\"token operator\">:</span>\n    runs<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span> ubuntu<span class=\"token operator\">-</span><span class=\"token number\">18.04</span>\n    steps<span class=\"token operator\">:</span>\n      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>checkout@v2\n      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>setup<span class=\"token operator\">-</span>node@v1\n        <span class=\"token keyword\">with</span><span class=\"token operator\">:</span>\n          node<span class=\"token operator\">-</span>version<span class=\"token operator\">:</span> <span class=\"token string\">'12.x'</span>\n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">-</span> name<span class=\"token operator\">:</span> npm install</span><span class=\"gatsby-highlight-code-line\">        run<span class=\"token operator\">:</span> npm install</span></code></pre></div>\n<p>Now the environment should be completely ready for the job to run actual important tasks in!</p>\n<h4>Lint</h4>\n<p>After the environment has been set up we can run all the scripts from <code>package.json</code> like we would on our own machine. To lint the code all you have to do is add a step to run the <code>npm run eslint</code> command.</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">jobs<span class=\"token operator\">:</span>\n  simple_deployment_pipeline<span class=\"token operator\">:</span>\n    runs<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span> ubuntu<span class=\"token operator\">-</span><span class=\"token number\">18.04</span>\n    steps<span class=\"token operator\">:</span>\n      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>checkout@v2\n      <span class=\"token operator\">-</span> uses<span class=\"token operator\">:</span> actions<span class=\"token operator\">/</span>setup<span class=\"token operator\">-</span>node@v1\n        <span class=\"token keyword\">with</span><span class=\"token operator\">:</span>\n          node<span class=\"token operator\">-</span>version<span class=\"token operator\">:</span> <span class=\"token string\">'12.x'</span>\n      <span class=\"token operator\">-</span> name<span class=\"token operator\">:</span> npm install \n        run<span class=\"token operator\">:</span> npm install  \n<span class=\"gatsby-highlight-code-line\">      <span class=\"token operator\">-</span> name<span class=\"token operator\">:</span> lint</span><span class=\"gatsby-highlight-code-line\">        run<span class=\"token operator\">:</span> npm run eslint</span></code></pre></div>\n</div>\n<div class=\"tasks\">\n<h3>Exercises 11.5.-11.9.</h3>\n<h4>11.5 Linting workflow</h4>\n<p>Implement or <i>copy-paste</i> the \"Lint\" workflow and commit it to the repository. Use a new <i>yml</i> file for this workflow, you may call it e.g. <i>pipeline.yml</i>.</p>\n<p>Push your code and navigate to \"Actions\" tab and click on your newly created workflow on the left. You should see that the workflow run has failed:</p>\n<picture><img src=\"/static/4921a74895fb06357f53ad736f579df3/5a190/5.png\" alt=\"Linting to workflow\" srcset=\"/static/4921a74895fb06357f53ad736f579df3/772e8/5.png 200w,\n/static/4921a74895fb06357f53ad736f579df3/e17e5/5.png 400w,\n/static/4921a74895fb06357f53ad736f579df3/5a190/5.png 800w,\n/static/4921a74895fb06357f53ad736f579df3/c1b63/5.png 1200w,\n/static/4921a74895fb06357f53ad736f579df3/29007/5.png 1600w,\n/static/4921a74895fb06357f53ad736f579df3/f0293/5.png 2250w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>11.6 Fix the code</h4>\n<p>There are some issues with the code that you will need to fix. Open up the workflow logs and investigate what is wrong.</p>\n<p>A couple of hints. One of the errors is best to be fixed by specifying proper <i>env</i> for linting, see <a href=\"/en/part3/validation_and_es_lint#lint\">here</a> how it can be done . One of the complaints concerning <code>console.log</code> statement could be taken care of by simply silencing the rule for that specific line. Ask google how to do it.</p>\n<p>Make the necessary changes to the source code so that the lint workflow passes. Once you commit new code the workflow will run again and you will see updated output where all is green again:</p>\n<picture><img src=\"/static/084fdf63239b15bba21384fdc2296bc8/5a190/6.png\" alt=\"Lint error fixed\" srcset=\"/static/084fdf63239b15bba21384fdc2296bc8/772e8/6.png 200w,\n/static/084fdf63239b15bba21384fdc2296bc8/e17e5/6.png 400w,\n/static/084fdf63239b15bba21384fdc2296bc8/5a190/6.png 800w,\n/static/084fdf63239b15bba21384fdc2296bc8/c1b63/6.png 1200w,\n/static/084fdf63239b15bba21384fdc2296bc8/29007/6.png 1600w,\n/static/084fdf63239b15bba21384fdc2296bc8/da893/6.png 2130w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>11.7 Building and testing</h4>\n<p>Let's expand on the previous workflow that currently does the linting of the code. Edit the workflow and similarly to the lint command add commands for build and test. After this step outcome should look like this</p>\n<picture><img src=\"/static/7d5f4ef374d66fb5772718f408a72ef3/5a190/7.png\" alt=\"tests fail...\" srcset=\"/static/7d5f4ef374d66fb5772718f408a72ef3/772e8/7.png 200w,\n/static/7d5f4ef374d66fb5772718f408a72ef3/e17e5/7.png 400w,\n/static/7d5f4ef374d66fb5772718f408a72ef3/5a190/7.png 800w,\n/static/7d5f4ef374d66fb5772718f408a72ef3/c1b63/7.png 1200w,\n/static/7d5f4ef374d66fb5772718f408a72ef3/29007/7.png 1600w,\n/static/7d5f4ef374d66fb5772718f408a72ef3/4faaa/7.png 2308w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>As you might have guessed, there are some problems in code...</p>\n<h4>11.8 Back to green</h4>\n<p>Investigate which test fails and fix the issue in the code (do not change the tests).</p>\n<p>Once you have fixed all the issues and the Pokedex is bug-free, the workflow run will succeed and show green!</p>\n<picture><img src=\"/static/9d58dc0568f34250ca9ecf9dee91678a/5a190/8.png\" alt=\"tests fixed\" srcset=\"/static/9d58dc0568f34250ca9ecf9dee91678a/772e8/8.png 200w,\n/static/9d58dc0568f34250ca9ecf9dee91678a/e17e5/8.png 400w,\n/static/9d58dc0568f34250ca9ecf9dee91678a/5a190/8.png 800w,\n/static/9d58dc0568f34250ca9ecf9dee91678a/c1b63/8.png 1200w,\n/static/9d58dc0568f34250ca9ecf9dee91678a/29007/8.png 1600w,\n/static/9d58dc0568f34250ca9ecf9dee91678a/37563/8.png 2228w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<h4>11.9 Simple end to end -tests</h4>\n<p>The current set of tests use <a href=\"https://jestjs.io/\">jest</a> to ensure that the React components work as intended. This is exactly the same thing that is done in section <a href=\"/en/part5/testing_react_apps\">Testing React apps</a> of part 5. </p>\n<p>Testing components in isolation is quite useful but that still does not ensure that the system as a whole works as we wish. To have more confidence about this, let us write a couple of really simple end to end -tests with the <a href=\"https://www.cypress.io/\">Cypress</a> library similarly what we do in section <a href=\"/en/part5/end_to_end_testing\">End to end testing</a> of part 5. </p>\n<p>So, setup cypress (you'll find <a href=\"/en/part5/end_to_end_testing/\">here</a> all info you need) and use this test at first:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token function\">describe</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pokedex'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">it</span><span class=\"token punctuation\">(</span><span class=\"token string\">'front page can be opened'</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">visit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'http://localhost:5000'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'ivysaur'</span><span class=\"token punctuation\">)</span>\n    cy<span class=\"token punctuation\">.</span><span class=\"token function\">contains</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Pokémon and Pokémon character names are trademarks of Nintendo.'</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Define a npm script <code>test:e2e</code> for running the e2e tests from the command line.</p>\n<p><strong>Note</strong> do not include the word <i>spec</i> in the cypress test file name, that would cause also jest to run it, and it might cause problems. </p>\n<p><strong>Another thing to note</strong> is that despite the page renders the Pokemon names by starting with a capital letter, the names are actually written with lower case letters in the source, so it is <code>ivysaur</code> instead of <code>Ivysaur</code>!</p>\n<p>Ensure that the test passes locally. Remember that the cypress tests <em>assume that the application is up and running</em> when you run the test! If you have forgotten the details (that happened to me too!), please see <a href=\"/en/part5/end_to_end_testing\">part 5</a> how to get up and running with cypress.</p>\n<p>Once the end to end test works in your machine, include it in the GitHub Action workflow. By far the easiest way to do that is to use the ready-made action <a href=\"https://github.com/cypress-io/github-action\">cypress-io/github-action</a>. The step that suits us is the following:</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token operator\">-</span> name<span class=\"token operator\">:</span> e2e tests\n  uses<span class=\"token operator\">:</span> cypress<span class=\"token operator\">-</span>io<span class=\"token operator\">/</span>github<span class=\"token operator\">-</span>action@v2\n  <span class=\"token keyword\">with</span><span class=\"token operator\">:</span>\n    command<span class=\"token operator\">:</span> npm run test<span class=\"token operator\">:</span>e2e\n    start<span class=\"token operator\">:</span> npm run start<span class=\"token operator\">-</span>prod\n    wait<span class=\"token operator\">-</span>on<span class=\"token operator\">:</span> http<span class=\"token operator\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token operator\">:</span><span class=\"token number\">5000</span></code></pre></div>\n<p>Three options are used. <a href=\"https://github.com/cypress-io/github-action#custom-test-command\">command</a> specifies how to run cypress tests. <a href=\"https://github.com/cypress-io/github-action#start-server\">start</a> gives npm script that starts the server and <a href=\"https://github.com/cypress-io/github-action#wait-on\">wait-on</a> says that before the tests are run, the server should have started in url <a href=\"http://localhost:5000\">http://localhost:5000</a>.</p>\n<p>Once you are sure that the pipeline works, write another test that ensures that one can navigate from the main page to the page of a particular Pokemon, e.g. <i>ivysaur</i>. The test does not need to be a complex one, just check that when you navigate a link, the page has some right content, such as the string <i>chlorophyll</i> in the case of <i>ivysaur</i>.</p>\n<p><strong>Note</strong> that you should not try <i>bulbasaur</i>, for some reason the page of that particular Pokemon does not work properly...</p>\n<p>The end result should be something like this</p>\n<picture><img src=\"/static/03b87ffa45da4677f46235bd2036468c/5a190/9.png\" alt=\"e2e tests\" srcset=\"/static/03b87ffa45da4677f46235bd2036468c/772e8/9.png 200w,\n/static/03b87ffa45da4677f46235bd2036468c/e17e5/9.png 400w,\n/static/03b87ffa45da4677f46235bd2036468c/5a190/9.png 800w,\n/static/03b87ffa45da4677f46235bd2036468c/c1b63/9.png 1200w,\n/static/03b87ffa45da4677f46235bd2036468c/29007/9.png 1600w,\n/static/03b87ffa45da4677f46235bd2036468c/410b4/9.png 2102w\" sizes=\"(max-width: 800px) 100vw, 800px\"></picture>\n<p>End to end -tests are nice since they give us confidence that software works from the end user's perspective. The price we have to pay is the slower feedback time. Now executing the whole workflow takes quite much longer.</p>\n</div>","frontmatter":{"mainImage":{"publicURL":"/static/56e5de2c8009789795a87071b1067167/part-11.svg"},"part":11,"letter":"b","lang":"en"}}},"pageContext":{"part":11,"letter":"b","lang":"en"}}}